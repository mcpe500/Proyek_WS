{"version":3,"sources":["config/environment.ts","models/dynamic/Subscription.model.ts","utils/AuthUtils.ts","contracts/enum/ResponseRelated.enum.ts","models/dynamic/User.model.ts","connection/connectionStatic.ts","models/static/Paket.model.ts","models/dynamic/Exercise.model.ts","services/ApiService.ts","contracts/enum/TransactionRelated.enum.ts","models/dynamic/Transaction.model.ts","validators/index.ts","validators/Topup.validate.ts","contracts/enum/UserRelated.enum.ts","controller/UserController.ts","middleware/AuthMiddleware.ts","middleware/ValidateMiddleware.ts","contracts/enum/FitnessRelated.enum.ts","validators/User.validate.ts","controller/PricingController.ts","controller/ExerciseController.ts","contracts/enum/PlansRelated.enum.ts","models/dynamic/Plans.model.ts","controller/UserPlanController.ts","validators/Plans.validate.ts","middleware/BusinessMiddleware.ts","config/NewsSources.ts","utils/NewsUtils.ts","controller/NewsController.ts","services/GoogleMapsService.ts","controller/GymsController.ts","validators/Maps.validate.ts","middleware/Upload.ts","router/router.ts","contracts/enum/RoutesRelated.enum.ts","documentation/paths/root.ts","documentation/paths/auth/register.ts","documentation/paths/auth/login.ts","documentation/paths/auth/newAccessTokenFromRefreshToken.ts","documentation/paths/auth/newRefreshToken.ts","documentation/paths/auth/verifyEmail.ts","documentation/paths/admin/getAllUser.ts","documentation/paths/user/topup.ts","documentation/paths/user/userDashboard.ts","documentation/paths/user/editUserProfile.ts","documentation/paths/public/getAllPricing.ts","documentation/paths/user/getUserAPIKey.ts","documentation/paths/user/resetUserAPIKey.ts","documentation/paths/user/subscribeToUserPacket.ts","documentation/paths/user/renewSubscription.ts","documentation/paths/user/plan/userPlanHandlers.ts","documentation/paths/user/plan/userPlanByIDHandlers.ts","documentation/paths/user/plan/editUserPlanById.ts","documentation/paths/user/plan/startUserPlanById.ts","documentation/paths/user/plan/completeUserPlanById.ts","documentation/paths/user/plan/exercise/workout/addWorkoutToExercisePlan.ts","documentation/paths/news/getNewsByTitle.ts","documentation/paths/user/plan/exercise/goals/getAllGoals.ts","documentation/paths/user/plan/cancelPlanByUser.ts","documentation/paths/admin/adminDashboard.ts","documentation/paths/admin/getAndDeleteUserProfile.ts","documentation/paths/admin/getAndPostAndDeletePacket.ts","documentation/paths/user/plan/exercise/getExerciseByQuery.ts","documentation/paths/news/getNewsFilterOrAllNews.ts","documentation/paths/user/plan/exercise/goals/getGoalByTitle.ts","documentation/paths/location/getNearestGyms.ts","documentation/paths/user/getProfilePicture.ts","documentation/paths/admin/getUserProfilePicture.ts","documentation/paths/admin/topupFromAdmin.ts","documentation/swagger.ts","connection/connection.ts","index.ts","run.ts"],"names":[],"mappings":"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","file":"run.js","sourceRoot":"..\\src","sourcesContent":["import { EnvironmentStructure } from \"../contracts/vo/EnvironmentRelated.vo\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nexport const ENV: EnvironmentStructure = {\r\n  PORT: parseInt(process.env.PORT || \"3000\"),\r\n  BACKEND_API_URL: process.env.BACKEND_API_URL ?? \"\", \r\n  SECRET_KEY: process.env.SECRET_KEY ?? \"\",\r\n  REFRESH_TOKEN_SECRET: process.env.REFRESH_TOKEN_SECRET ?? \"\",\r\n  ACCESS_TOKEN_SECRET: process.env.ACCESS_TOKEN_SECRET ?? \"\",\r\n  EMAIL_VERIFICATION_TOKEN_SECRET:\r\n    process.env.EMAIL_VERIFICATION_TOKEN_SECRET ?? \"\",\r\n  REFRESH_TOKEN_AGE: process.env.REFRESH_TOKEN_AGE ?? \"\",\r\n  ACCESS_TOKEN_AGE: process.env.ACCESS_TOKEN_AGE ?? \"\",\r\n  REMEMBER_ME_REFRESH_TOKEN_AGE:\r\n    process.env.REMEMBER_ME_REFRESH_TOKEN_AGE ?? \"\",\r\n  REMEMBER_ME_ACCESS_TOKEN_AGE: process.env.REMEMBER_ME_ACCESS_TOKEN_AGE ?? \"\",\r\n  EMAIL_VERIFICATION_AGE: process.env.EMAIL_VERIFICATION_AGE ?? \"\",\r\n  MONGODB_URI: process.env.MONGODB_URI ?? \"\",\r\n  DB_STATIC_DIALECT: process.env.DB_STATIC_DIALECT ?? \"mysql\",\r\n  DB_STATIC_HOST: process.env.DB_STATIC_HOST ?? \"localhost\",\r\n  DB_STATIC_PORT: parseInt(process.env.DB_STATIC_PORT ?? \"3306\"),\r\n  DB_STATIC_USERNAME: process.env.DB_STATIC_USERNAME ?? \"root\",\r\n  DB_STATIC_PASSWORD: process.env.DB_STATIC_PASSWORD ?? \"\",\r\n  DB_STATIC_DATABASE: process.env.DB_STATIC_DATABASE ?? \"db_name\",\r\n  API_NINJAS_API_KEY: process.env.API_NINJAS_API_KEY ?? \"\",\r\n  API_GOOGLE_PLACES_API_KEY: process.env.API_GOOGLE_PLACES_API_KEY ?? \"\",\r\n};\r\n","import mongoose, { Schema } from \"mongoose\";\nimport { ISubscription } from \"../../contracts/dto/SubscriptionRelated.dto\";\n\nconst SubscriptionSchema: Schema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\n  paketId: { type: String, required: true },\n  apiHit: { type: Number, required: true, default: 0 },\n  startDate: { type: Date, default: Date.now() },\n  endDate: { type: Date, required: true },\n  isActive: { type: Boolean, default: true },\n  apiKey: { type: String },\n  resetAt: { type: Date, required: true },\n});\n\nexport const Subscription = mongoose.model<ISubscription>(\n  \"Subscription\",\n  SubscriptionSchema\n);\n","import bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { ENV } from \"../config/environment\";\r\nimport crypto from \"crypto\";\r\nimport nodemailer, { SendMailOptions } from \"nodemailer\";\r\nimport ejs from \"ejs\";\r\nimport path from \"path\";\r\nimport { Subscription } from \"../models/dynamic/Subscription.model\";\r\n\r\n// Use a secret key from environment variables\r\n// const SECRET_KEY = process.env.SECRET_KEY || 'your-default-secret-key';\r\n\r\nexport const hashPassword = async (password: string): Promise<string> => {\r\n  const salt = await bcrypt.genSalt(10);\r\n  const hashedPassword = await bcrypt.hash(password + ENV.SECRET_KEY, salt);\r\n  return hashedPassword;\r\n};\r\n\r\nexport const verifyPassword = async (\r\n  password: string,\r\n  hashedPassword: string\r\n): Promise<boolean> => {\r\n  const match = await bcrypt.compare(password + ENV.SECRET_KEY, hashedPassword);\r\n  return match;\r\n};\r\n\r\nexport const createAccessToken = (\r\n  payload: any,\r\n  rememberMe: boolean\r\n): string => {\r\n  return jwt.sign(payload, ENV.ACCESS_TOKEN_SECRET, {\r\n    expiresIn: rememberMe\r\n      ? ENV.REMEMBER_ME_ACCESS_TOKEN_AGE\r\n      : ENV.ACCESS_TOKEN_AGE,\r\n  });\r\n};\r\n\r\nexport const createRefreshToken = (\r\n  payload: any,\r\n  rememberMe: boolean\r\n): string => {\r\n  return jwt.sign(payload, ENV.REFRESH_TOKEN_SECRET, {\r\n    expiresIn: rememberMe\r\n      ? ENV.REMEMBER_ME_REFRESH_TOKEN_AGE\r\n      : ENV.REFRESH_TOKEN_AGE,\r\n  });\r\n};\r\n\r\nexport const verifyAccessToken = (token: string): any => {\r\n  try {\r\n    return jwt.verify(token, ENV.ACCESS_TOKEN_SECRET);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const verifyRefreshToken = (token: string): any => {\r\n  try {\r\n    return jwt.verify(token, ENV.REFRESH_TOKEN_SECRET);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generateApiKey = async () => {\r\n  let apiKey = \"\";\r\n  while (true) {\r\n    apiKey = crypto.randomBytes(32).toString(\"hex\");\r\n    const temp = await Subscription.findOne({\r\n      apiKey: apiKey,\r\n    });\r\n    if (!temp) break;\r\n  }\r\n  return apiKey;\r\n};\r\n\r\nexport const generateEmailVerificationToken = (email: string) => {\r\n  return jwt.sign({ email }, ENV.EMAIL_VERIFICATION_TOKEN_SECRET, {\r\n    expiresIn: ENV.EMAIL_VERIFICATION_AGE,\r\n  });\r\n};\r\n\r\nexport const verifyEmailVerificationToken = (token: string) => {\r\n  try {\r\n    return jwt.verify(token, ENV.EMAIL_VERIFICATION_TOKEN_SECRET);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const sendVerificationEmail = async (\r\n  email: string,\r\n  token: string,\r\n  username: string\r\n) => {\r\n  let transporter = nodemailer.createTransport({\r\n    host: \"smtp.ethereal.email\",\r\n    port: 587,\r\n    secure: false,\r\n    auth: {\r\n      user: \"cara.cassin54@ethereal.email\",\r\n      pass: \"sa1eN3haQ3vpTAweud\",\r\n    },\r\n  });\r\n\r\n  let mailOptions: SendMailOptions = {\r\n    from: \"cara.cassin54@ethereal.email\",\r\n    to: email, // Use the email parameter\r\n    subject: \"Test Mail\",\r\n  };\r\n  console.log(email, token, username);\r\n\r\n  ejs.renderFile(\r\n    path.join(__dirname, \"../templates\", \"verification_email_template.ejs\"),\r\n    {\r\n      name: username,\r\n      token: `http://localhost:3000/api/v1/auth/verify/${token}`,\r\n    },\r\n    (err, data) => {\r\n      if (err) {\r\n        console.log(err);\r\n      } else {\r\n        mailOptions.html = data;\r\n        transporter.sendMail(mailOptions, (error, info) => {\r\n          if (error) {\r\n            console.log(error);\r\n          } else {\r\n            console.log(\"Message sent: \" + info.response);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  );\r\n};\r\n","export enum RESPONSE_STATUS {\r\n    SUCCESS = 200,\r\n    CREATED = 201,\r\n    BAD_REQUEST = 400,\r\n    UNAUTHORIZED = 401,\r\n    FORBIDDEN = 403,\r\n    NOT_FOUND = 404,\r\n    INTERNAL_SERVER_ERROR = 500\r\n\r\n}","import mongoose, { Schema } from \"mongoose\";\r\nimport { IUser } from \"../../contracts/dto/UserRelated.dto\";\r\n\r\nconst UserSchema: Schema = new Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  fullName: { type: String, required: true },\r\n  phone: { type: String, required: true },\r\n  profilePicture: {\r\n    type: String,\r\n    default: \"src\\\\storage\\\\images\\\\profilePictures\\\\default_profile.png\",\r\n  },\r\n  age: { type: Number, required: false },\r\n  gender: { type: String, required: false },\r\n  height: { type: Number, required: false },\r\n  weight: { type: Number, required: false },\r\n  healthInformation: { type: String, required: false },\r\n  balance: { type: Number, default: 0 },\r\n  refreshToken: { type: String, required: false },\r\n  accessToken: { type: String, required: false },\r\n  isEmailVerified: { type: Boolean, default: false },\r\n  emailVerificationToken: { type: String },\r\n  role: { type: String, default: \"USER\" },\r\n});\r\n\r\nexport const User = mongoose.model<IUser>(\"User\", UserSchema);\r\n","import { Dialect, Sequelize } from \"sequelize\";\r\nimport { ENV } from \"../config/environment\";\r\n\r\nexport const sequelize = new Sequelize(\r\n  ENV.DB_STATIC_DATABASE,\r\n  ENV.DB_STATIC_USERNAME,\r\n  ENV.DB_STATIC_PASSWORD,\r\n  {\r\n    dialect: ENV.DB_STATIC_DIALECT as Dialect,\r\n    host: ENV.DB_STATIC_HOST,\r\n    port: ENV.DB_STATIC_PORT,\r\n  }\r\n);\r\n\r\n// Test the connection\r\nsequelize\r\n  .authenticate()\r\n  .then(() => {\r\n    console.log(\"Database connection successful!\");\r\n  })\r\n  .catch((error: any) => {\r\n    console.error(\"Unable to connect to the database:\", error);\r\n  });\r\n\r\n// Export the Sequelize instance\r\nexport default sequelize;\r\n","// models/Paket.ts\r\nimport { DataTypes, Model } from \"sequelize\";\r\nimport sequelize from \"../../connection/connectionStatic\";\r\nimport { IPaket } from \"../../contracts/dto/Paket.dto\";\r\n\r\nclass Paket extends Model<IPaket> {\r\n  public Paket_id!: string;\r\n  public Paket_name!: string;\r\n  public Paket_description!: string;\r\n  public Paket_Limit!: number;\r\n  public Paket_price!: number;\r\n  public Paket_price_currency!: string;\r\n}\r\n\r\nPaket.init(\r\n  {\r\n    Paket_id: {\r\n      type: DataTypes.CHAR(6),\r\n      primaryKey: true,\r\n    },\r\n    Paket_name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    Paket_description: {\r\n      type: DataTypes.TEXT,\r\n    },\r\n    Paket_Limit: {\r\n      type: DataTypes.INTEGER,\r\n    },\r\n    Paket_price: {\r\n      type: DataTypes.FLOAT,\r\n      allowNull: false,\r\n    },\r\n    Paket_price_currency: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      defaultValue: \"IDR\",\r\n    },\r\n  },\r\n  {\r\n    sequelize: sequelize,\r\n    modelName: \"Paket\",\r\n    tableName: \"pakets\",\r\n    timestamps: false,\r\n  }\r\n);\r\n\r\nexport default Paket;\r\n","import mongoose, { Model, Schema } from \"mongoose\";\nimport { IExercise, IExercisePlan } from \"../../contracts/dto/PlansRelated.dto\";\n\nconst ExerciseSchema: Schema = new Schema({\n  name: { type: String, required: true },\n  type: { type: String, required: true },\n  targeted_muscle: { type: String, required: true },\n  equipmentRequired: [{ type: String, required: false }],\n  description: { type: String, required: true },\n});\n\nconst ExercisePlanSchema: Schema = new Schema({\n  exercises: [\n    {\n      name: { type: String, required: true },\n      description: { type: String, required: true },\n      sets: { type: Number, required: true },\n      repetitions: { type: Number, required: true },\n      restBetweenSetsInSeconds: { type: Number, required: true },\n      equipmentRequired: [\n        {\n          name: { type: String, required: true },\n          description: { type: String, required: true }\n        }\n      ]\n    }\n  ]\n});\n\nexport const Exercise: Model<IExercise> = mongoose.model<IExercise>(\n  \"Exercise\",\n  ExerciseSchema\n);\n\nexport const ExercisePlan: Model<IExercisePlan> = mongoose.model<IExercisePlan>(\n  \"ExercisePlan\",\n  ExercisePlanSchema\n);","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { ENV } from \"../config/environment\";\r\n\r\nclass ApiService {\r\n  private axiosInstance: AxiosInstance;\r\n\r\n  constructor(baseURL: string, headers: AxiosRequestConfig[\"headers\"] = {}) {\r\n    this.axiosInstance = axios.create({\r\n      baseURL,\r\n      headers,\r\n    });\r\n  }\r\n\r\n  async get<T>(url: string, config: AxiosRequestConfig = {}): Promise<T> {\r\n    const response = await this.axiosInstance.get<T>(url, config);\r\n    return response.data;\r\n  }\r\n\r\n  async post<T>(\r\n    url: string,\r\n    data?: any,\r\n    config: AxiosRequestConfig = {}\r\n  ): Promise<T> {\r\n    const response = await this.axiosInstance.post<T>(url, data, config);\r\n    return response.data;\r\n  }\r\n\r\n  async put<T>(\r\n    url: string,\r\n    data?: any,\r\n    config: AxiosRequestConfig = {}\r\n  ): Promise<T> {\r\n    const response = await this.axiosInstance.put<T>(url, data, config);\r\n    return response.data;\r\n  }\r\n\r\n  async patch<T>(\r\n    url: string,\r\n    data?: any,\r\n    config: AxiosRequestConfig = {}\r\n  ): Promise<T> {\r\n    const response = await this.axiosInstance.patch<T>(url, data, config);\r\n    return response.data;\r\n  }\r\n\r\n  async delete<T>(url: string, config: AxiosRequestConfig = {}): Promise<T> {\r\n    const response = await this.axiosInstance.delete<T>(url, config);\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport const Apis = {\r\n  API_NINJA_ApiService: new ApiService(\r\n    \"https://api.api-ninjas.com/v1/exercises\",\r\n    {\r\n      \"X-Api-Key\": ENV.API_NINJAS_API_KEY,\r\n    }\r\n  ),\r\n};\r\n","export enum TransactionHeaderType {\r\n  TOPUP = \"TOPUP\",\r\n  SUBSCRIBE = \"SUBSCRIBE\",\r\n}\r\n\r\nexport enum TransactionDetailType {\r\n  ADMIN_TOPUP = \"ADMIN_TOPUP\",\r\n  ADMIN_SUBSCRIBE = \"ADMIN_SUBSCRIBE\",\r\n  USER_TOPUP = \"USER_TOPUP\",\r\n  USER_SUBSCRIBE = \"USER_SUBSCRIBE\",\r\n  USER_RENEW = \"USER_RENEW\",\r\n}\r\n","import mongoose, { Schema } from \"mongoose\";\r\nimport { ITransaction } from \"../../contracts/dto/TransactionRelated.dto\";\r\nimport {\r\n  TransactionDetailType,\r\n  TransactionHeaderType,\r\n} from \"../../contracts/enum/TransactionRelated.enum\";\r\n\r\nconst TransactionSchema: Schema = new Schema({\r\n  header: {\r\n    transactionHeaderType: {\r\n      type: String,\r\n      enum: Object.values(TransactionHeaderType),\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: Date,\r\n      required: true,\r\n    },\r\n    total: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      required: false,\r\n    },\r\n    adminId: {\r\n      type: Schema.Types.ObjectId,\r\n      required: false,\r\n    },\r\n  },\r\n  details: [\r\n    {\r\n      transactionDetailType: {\r\n        type: String,\r\n        enum: Object.values(TransactionDetailType),\r\n        required: true,\r\n      },\r\n      paket_id: String,\r\n      subscription_id: String,\r\n      month: Number,\r\n      price: Number,\r\n      subtotal: Number,\r\n      message: String,\r\n      userId: {\r\n        type: Schema.Types.ObjectId,\r\n        required: false,\r\n      },\r\n    },\r\n  ],\r\n});\r\n\r\nexport const Transaction = mongoose.model<ITransaction>(\r\n  \"Transaction\",\r\n  TransactionSchema\r\n);\r\n","import Joi from \"joi\";\r\nimport JoiDate from \"@joi/date\";\r\nexport const JoiExtended = Joi.extend(JoiDate);\r\n","import { Schema } from \"joi\";\nimport { JoiExtended } from \".\";\n\nexport const topupSchema : Schema = JoiExtended.object({\n    saldo: JoiExtended.number().positive().required().messages({\n      'number.base': `\"saldo\" should be a type of number`,\n      'number.positive': `\"saldo\" must be a positive number`,\n      'any.required': `\"saldo\" is a required field`\n    })\n  });","export enum ROLE {\n    USER = \"USER\",\n    ADMIN = \"ADMIN\",\n    // SUPER_ADMIN = \"SUPER_ADMIN\"\n}","// import { bcrypt } from 'bcrypt';\r\nimport { Request, Response } from \"express\";\r\nimport {\r\n  createAccessToken,\r\n  createRefreshToken,\r\n  generateApiKey,\r\n  generateEmailVerificationToken,\r\n  hashPassword,\r\n  sendVerificationEmail,\r\n  verifyEmailVerificationToken,\r\n  verifyPassword,\r\n  verifyRefreshToken,\r\n} from \"../utils/AuthUtils\";\r\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\r\nimport { User } from \"../models/dynamic/User.model\";\r\nimport Paket from \"../models/static/Paket.model\";\r\nimport { JwtPayload } from \"jsonwebtoken\";\r\n\r\nimport crypto from \"crypto\";\r\nimport { Subscription } from \"../models/dynamic/Subscription.model\";\r\nimport { Exercise } from \"../models/dynamic/Exercise.model\";\r\nimport { Apis } from \"../services/ApiService\";\r\nimport { IExercise } from \"../contracts/dto/PlansRelated.dto\";\r\nimport {\r\n  TransactionDetailType,\r\n  TransactionHeaderType,\r\n} from \"../contracts/enum/TransactionRelated.enum\";\r\nimport { Transaction } from \"../models/dynamic/Transaction.model\";\r\nimport {\r\n  ITransaction,\r\n  ITransactionSubscriptionDetail,\r\n  ITransactionTopUpDetail,\r\n  ITransationHeaderAdmin,\r\n  ITransationHeaderUser,\r\n} from \"../contracts/dto/TransactionRelated.dto\";\r\nimport { topupSchema } from \"../validators/Topup.validate\";\r\nimport mongoose from \"mongoose\";\r\nimport { ROLE } from \"../contracts/enum/UserRelated.enum\";\r\n\r\n// const UserSchema: Schema = new Schema({\r\n//   fullName: { type: String, required: true },\r\n//   username: { type: String, required: true, unique: true },\r\n//   email: { type: String, required: true, unique: true },\r\n//   phone: { type: String, required: true },\r\n//   password: { type: String, required: true },\r\n//   age: { type: Number, required: true },\r\n//   gender: { type: String, required: true },\r\n//   height: { type: Number, required: true },\r\n//   weight: { type: Number, required: true },\r\n//   healthInformation: { type: String, required: true },\r\n//   refreshToken: { type: String },\r\n//   isEmailVerified: { type: Boolean, default: false },\r\n//   emailVerificationToken: { type: String },\r\n// });\r\n\r\nexport const registerUser = async (req: Request, res: Response) => {\r\n  const { username, email, password, fullName, phone } = req.body;\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ $or: [{ username }, { email }] }); //\r\n    if (existingUser) {\r\n      return res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .json({ msg: \"Username or email already exists\" });\r\n    }\r\n\r\n    const hashedPassword = await hashPassword(password);\r\n\r\n    const emailToken = generateEmailVerificationToken(email);\r\n    const newUser = new User({\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n      fullName,\r\n      phone,\r\n      isEmailVerified: false,\r\n      emailVerificationToken: emailToken,\r\n    });\r\n    const savedUser = await newUser.save();\r\n    const respone = {\r\n      username: savedUser.username,\r\n      email: savedUser.email,\r\n      fullName: savedUser.email,\r\n      phone: savedUser.phone,\r\n      _id: savedUser._id,\r\n    };\r\n    await sendVerificationEmail(email, emailToken, username);\r\n    return res.status(RESPONSE_STATUS.CREATED).json({\r\n      msg: \"Register Successful, please verify your email within 24 hours!\",\r\n      user: respone,\r\n    });\r\n  } catch (error) {\r\n    return res.status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR).send(error);\r\n  }\r\n};\r\n\r\nexport const loginUser = async (req: Request, res: Response) => {\r\n  const { username, email, password, rememberMe } = req.body;\r\n  // console.log(req.body);\r\n  const user = await User.findOne({ $or: [{ username }, { email }] });\r\n  if (!user) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ msg: \"Invalid credentials\" });\r\n  }\r\n  if (!user.isEmailVerified) {\r\n    if (!verifyEmailVerificationToken(user.emailVerificationToken)) {\r\n      await User.deleteOne({ _id: user._id });\r\n\r\n      return res.status(RESPONSE_STATUS.BAD_REQUEST).send({\r\n        message:\r\n          \"Your email verification token has expired and as a result, your account has been deleted\",\r\n      });\r\n    }\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .send({ message: \"Please verify your email\" });\r\n  }\r\n  const isPasswordValid = await verifyPassword(password, user.password);\r\n  if (!isPasswordValid) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ msg: \"Invalid credentials\" });\r\n  }\r\n  const dataToToken = {\r\n    username: username,\r\n    email: email,\r\n  };\r\n  const accessToken = createAccessToken(dataToToken, rememberMe);\r\n  const refreshToken = createRefreshToken(dataToToken, rememberMe);\r\n\r\n  await user.updateOne({\r\n    refreshToken: refreshToken,\r\n    accessToken: accessToken,\r\n  });\r\n\r\n  res.cookie(\"refreshToken\", refreshToken, { httpOnly: true });\r\n  return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n    msg: \"Logged in successfully\",\r\n    token: accessToken,\r\n  });\r\n};\r\n\r\nexport const getDashboard = async (req: Request, res: Response) => {\r\n  //   const { username, email } = req.body;\r\n  //   const user = await User.findOne({ $or: [{ username }, { email }] });\r\n  const user = (req as any).user;\r\n  return res.status(RESPONSE_STATUS.SUCCESS).json({ user: user });\r\n};\r\n\r\nexport const getProfPic = async (req: Request, res: Response) => {\r\n  const user = (req as any).user;\r\n  return res.sendFile(user.profilePicture, { root: \".\" });\r\n};\r\n\r\nexport const editProfile = async (req: Request, res: Response) => {\r\n  const {\r\n    old_password,\r\n    new_password,\r\n    confirm_password,\r\n    fullName,\r\n    phone,\r\n    age,\r\n    gender,\r\n    height,\r\n    weight,\r\n    healthInformation,\r\n  } = req.body;\r\n  const user = (req as any).user;\r\n  // console.log(user);\r\n\r\n  if (!user) {\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ message: \"User not found\" });\r\n  }\r\n\r\n  if (old_password && old_password != \"\") {\r\n    const isPasswordValid = await verifyPassword(old_password, user.password);\r\n    if (!isPasswordValid) {\r\n      return res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .json({ msg: \"old_password is incorrect\" });\r\n    }\r\n\r\n    if (new_password && new_password == \"\") {\r\n      return res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .json({ msg: \"new_password must not be empty\" });\r\n    }\r\n    if (new_password != confirm_password) {\r\n      return res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .json({ msg: \"confirm_password does not match\" });\r\n    }\r\n    const hashedPassword = await hashPassword(new_password);\r\n\r\n    // Update password\r\n    user.password = hashedPassword;\r\n  }\r\n\r\n  // Update other fields if they are not empty\r\n  if (fullName && fullName != \"\") user.fullName = fullName;\r\n  if (phone && phone != \"\") user.phone = phone;\r\n  if (age && age != \"\") user.age = age;\r\n  if (gender && gender != \"\") user.gender = gender;\r\n  if (height && height != \"\") user.height = height;\r\n  if (weight && weight != \"\") user.weight = weight;\r\n  if (healthInformation && healthInformation != \"\")\r\n    user.healthInformation = healthInformation;\r\n  if (req.file) user.profilePicture = req.file.path;\r\n\r\n  // Save the updated user\r\n  await user.save();\r\n\r\n  return res.status(RESPONSE_STATUS.SUCCESS).json({ user: user });\r\n};\r\n\r\nexport const newRefreshToken = async (req: Request, res: Response) => {\r\n  const refreshToken = req.cookies.refreshToken;\r\n  try {\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n    const user = await User.findOne({\r\n      $or: [{ username: decoded.username }, { email: decoded.email }],\r\n    });\r\n    if (!user) {\r\n      return res\r\n        .status(RESPONSE_STATUS.NOT_FOUND)\r\n        .json({ message: \"User not found\" });\r\n    }\r\n    const dataToToken = {\r\n      username: user.username,\r\n      email: user.email,\r\n    };\r\n    const newRefreshToken = createRefreshToken(dataToToken, false);\r\n    await user.updateOne({ refreshToken: newRefreshToken });\r\n    res.cookie(\"refreshToken\", refreshToken, { httpOnly: true });\r\n    return res\r\n      .status(RESPONSE_STATUS.SUCCESS)\r\n      .json({ message: \"Refresh token generated successfully\" });\r\n  } catch (err) {\r\n    return res\r\n      .status(RESPONSE_STATUS.FORBIDDEN)\r\n      .json({ message: \"Invalid refresh token\" });\r\n  }\r\n};\r\n\r\nexport const generateNewAccessToken = async (req: Request, res: Response) => {\r\n  const refreshToken = req.cookies.refreshToken;\r\n\r\n  try {\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n    // console.log(\"decoded : \", decoded);\r\n    const user = await User.findOne({\r\n      $or: [{ username: decoded.username }, { email: decoded.email }],\r\n    });\r\n    // console.log(user);\r\n    if (!user) {\r\n      return res\r\n        .status(RESPONSE_STATUS.NOT_FOUND)\r\n        .json({ message: \"User not found\" });\r\n    }\r\n\r\n    const dataToToken = {\r\n      username: user.username,\r\n      email: user.email,\r\n    };\r\n    const accessToken = createAccessToken(dataToToken, false);\r\n    await user.updateOne({ accessToken: accessToken });\r\n    return res.status(RESPONSE_STATUS.SUCCESS).json({ accessToken });\r\n  } catch (err) {\r\n    return res\r\n      .status(RESPONSE_STATUS.FORBIDDEN)\r\n      .json({ message: \"Invalid refresh token\" });\r\n  }\r\n};\r\n\r\nexport const verifyEmail = async (req: Request, res: Response) => {\r\n  const { emailVerificationToken } = req.params;\r\n  try {\r\n    const decoded: JwtPayload | null = verifyEmailVerificationToken(\r\n      emailVerificationToken\r\n    ) as JwtPayload;\r\n\r\n    const user = await User.findOne({\r\n      emailVerificationToken: emailVerificationToken,\r\n    });\r\n\r\n    if (user?.email != decoded?.email) {\r\n      return res\r\n        .status(RESPONSE_STATUS.FORBIDDEN)\r\n        .json({ message: \"Invalid email verification token\" });\r\n    }\r\n\r\n    if (!user) {\r\n      return res\r\n        .status(RESPONSE_STATUS.NOT_FOUND)\r\n        .json({ message: \"User not found\" });\r\n    }\r\n    // TODO : (Make sure it works)Bikin ngasi ApiKey waktu subscribe, sama Api Key masuk ke subscription udh bukan di user (DONE, Hansen)\r\n\r\n    let apiKey = await generateApiKey();\r\n    await user.updateOne({\r\n      isEmailVerified: true,\r\n      emailVerificationToken: null,\r\n    });\r\n\r\n    const subscription = new Subscription({\r\n      userId: user._id,\r\n      paketId: \"PAK001\",\r\n      endDate: new Date(\"9999-12-31T23:59:59.999Z\"),\r\n      resetAt: new Date(new Date().getTime() + 60 * 1000),\r\n      apiKey: apiKey,\r\n    });\r\n    await subscription.save();\r\n\r\n    return res\r\n      .status(RESPONSE_STATUS.SUCCESS)\r\n      .send({ message: \"Email verified\" });\r\n  } catch (err) {\r\n    return res.status(RESPONSE_STATUS.FORBIDDEN).json({\r\n      message:\r\n        \"Invalid email verification token or your email verification token has expired\",\r\n    });\r\n  }\r\n};\r\n\r\n// TODO bikin ini response nya, list of ApiKey dari subscribe yg usernya lagi login (DONE, Hansen)\r\nexport const getApiKey = async (req: Request, res: Response) => {\r\n  const user = (req as any).user;\r\n  const subscribe = await Subscription.findOne({ userId: user._id });\r\n\r\n  try {\r\n    // Jika pengguna ditemukan, kirimkan API key\r\n    if ((subscribe as any).apiKey) {\r\n      return res\r\n        .status(RESPONSE_STATUS.SUCCESS)\r\n        .json({ apiKey: (subscribe as any).apiKey });\r\n    } else {\r\n      return res\r\n        .status(RESPONSE_STATUS.NOT_FOUND)\r\n        .json({ msg: \"API key not found for this user\" });\r\n    }\r\n  } catch (error) {\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ msg: \"Internal server error\" });\r\n  }\r\n};\r\n\r\n// TODO bikin ini supaya ngereset apikey dari subscription (DONE, Hansen)\r\nexport const resetApiKey = async (req: Request, res: Response) => {\r\n  const user = (req as any).user;\r\n  try {\r\n    let newApiKey = await generateApiKey();\r\n    const updatedSubscribe = await Subscription.findOneAndUpdate(\r\n      { userId: user._id },\r\n      { $set: { apiKey: newApiKey } },\r\n      { new: true, useFindAndModify: false } // Returns the updated document\r\n    );\r\n    return res\r\n      .status(RESPONSE_STATUS.SUCCESS)\r\n      .json({ apiKey: (updatedSubscribe as any).apiKey });\r\n  } catch (error) {\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ msg: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nexport const topup = async (req: Request, res: Response) => {\r\n  const { amount } = req.body;\r\n  const user = (req as any).user;\r\n\r\n  if (!amount || amount <= 0) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ message: \"Invalid amount\" });\r\n  }\r\n\r\n  const session = await mongoose.startSession();\r\n  session.startTransaction();\r\n\r\n  try {\r\n    const transactionHeader: ITransationHeaderUser = {\r\n      transactionHeaderType: TransactionHeaderType.TOPUP,\r\n      date: new Date(),\r\n      total: amount,\r\n      userId: user._id,\r\n    };\r\n\r\n    const transactionDetails: ITransactionTopUpDetail[] = [\r\n      {\r\n        transactionDetailType: TransactionDetailType.USER_TOPUP,\r\n        subtotal: amount,\r\n        message: `User: ${user.username}, does action = ${TransactionDetailType.USER_TOPUP} with amount = ${amount}`,\r\n      },\r\n    ];\r\n\r\n    const transaction: ITransaction = {\r\n      header: transactionHeader,\r\n      details: transactionDetails,\r\n    };\r\n    await Transaction.create([transaction], { session });\r\n    user.balance += amount;\r\n    await user.save({ session });\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n      message: \"Balance updated successfully.\",\r\n      currentBalance: user.balance,\r\n    });\r\n  } catch (error) {\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\n// TODO bikin ini supaya ada api key nya\r\nexport const subscribePacket = async (req: Request, res: Response) => {\r\n  const subscriptions = req.body; // This should be an array of { paketId, month }\r\n  const user = (req as any).user;\r\n\r\n  if (!Array.isArray(subscriptions)) {\r\n    return res.status(RESPONSE_STATUS.BAD_REQUEST).json({\r\n      message: \"Invalid request format. Expected an array of subscriptions.\",\r\n    });\r\n  }\r\n\r\n  const session = await mongoose.startSession();\r\n  session.startTransaction();\r\n\r\n  try {\r\n    const transactionDetails = [];\r\n\r\n    for (const sub of subscriptions) {\r\n      const { paketId, month } = sub;\r\n\r\n      if (!paketId || !month) {\r\n        throw {\r\n          status: RESPONSE_STATUS.BAD_REQUEST,\r\n          message: `Request fields not valid`,\r\n        };\r\n      }\r\n\r\n      const paket = await Paket.findOne({\r\n        where: {\r\n          Paket_id: paketId,\r\n        },\r\n      });\r\n\r\n      if (!paket) {\r\n        throw {\r\n          status: RESPONSE_STATUS.NOT_FOUND,\r\n          message: `Paket not found: ${paketId}`,\r\n        };\r\n      }\r\n\r\n      if (paketId === \"PAK001\") {\r\n        throw {\r\n          status: RESPONSE_STATUS.BAD_REQUEST,\r\n          message: `You can't subscribe to this paket: ${paketId}`,\r\n        };\r\n      }\r\n\r\n      if (month < 1) {\r\n        throw {\r\n          status: RESPONSE_STATUS.BAD_REQUEST,\r\n          message: `Invalid number of months for paket: ${paketId}`,\r\n        };\r\n      }\r\n\r\n      // Check balance\r\n      const totalCost = paket.Paket_price * parseInt(month);\r\n      if (user.balance < totalCost) {\r\n        throw {\r\n          status: RESPONSE_STATUS.BAD_REQUEST,\r\n          message: \"Not enough balance! Please top up first\",\r\n        };\r\n      }\r\n\r\n      // Update balance\r\n      user.balance -= totalCost;\r\n      await user.save({ session });\r\n\r\n      let endDate = new Date();\r\n      endDate.setMonth(endDate.getMonth() + parseInt(month));\r\n      endDate.setDate(endDate.getDate() - 1);\r\n      endDate.setHours(23);\r\n      endDate.setMinutes(59);\r\n      endDate.setSeconds(59);\r\n\r\n      // Insert subscription\r\n      const apiKey = await generateApiKey();\r\n      const subscription = new Subscription({\r\n        userId: user._id,\r\n        paketId,\r\n        endDate,\r\n        apiKey,\r\n        resetAt: new Date(new Date().getTime() + 60 * 1000),\r\n      });\r\n      await subscription.save({ session });\r\n\r\n      transactionDetails.push({\r\n        transactionDetailType: TransactionDetailType.USER_SUBSCRIBE,\r\n        paket_id: paketId,\r\n        subscription_id: subscription._id,\r\n        month: month,\r\n        price: paket.Paket_price,\r\n        subtotal: totalCost,\r\n        message: `User: ${user.username} bought a subscription to ${paket.Paket_name} for ${month} month(s) at Rp${paket.Paket_price} per month.`,\r\n      });\r\n    }\r\n\r\n    // Insert transaction log\r\n    const transaction = new Transaction({\r\n      header: {\r\n        transactionHeaderType: TransactionHeaderType.SUBSCRIBE,\r\n        date: new Date(),\r\n        total: transactionDetails.reduce(\r\n          (acc, detail) => acc + detail.subtotal,\r\n          0\r\n        ),\r\n        userId: user._id,\r\n      },\r\n      details: transactionDetails,\r\n    });\r\n    await transaction.save({ session });\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    return res.status(RESPONSE_STATUS.CREATED).json({\r\n      message: \"All subscriptions created successfully\",\r\n      transaction: transaction.header,\r\n      subscriptions: transactionDetails,\r\n      remainingBalance: `Rp${user.balance}`,\r\n    });\r\n  } catch (error) {\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n\r\n    // Ensure the error has status and message properties\r\n    const status =\r\n      (error as any).status || RESPONSE_STATUS.INTERNAL_SERVER_ERROR;\r\n    const errorMessage = (error as any).message || \"Internal server error\";\r\n\r\n    return res.status(status).json({ message: errorMessage });\r\n  }\r\n};\r\n\r\nexport const renewSubscription = async (req: Request, res: Response) => {\r\n  const { apiKey } = req.query;\r\n  const { month } = req.body;\r\n  const user = (req as any).user;\r\n\r\n  if (month < 1) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ message: \"Invalid number of months\" });\r\n  }\r\n\r\n  if (typeof apiKey !== \"string\") {\r\n    return res.status(400).json({ error: \"Invalid API key format\" });\r\n  }\r\n\r\n  // Check active subscription\r\n  const activeSubscription = await Subscription.findOne({\r\n    userId: user._id,\r\n    apiKey: apiKey,\r\n  });\r\n\r\n  if (!activeSubscription) {\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ message: \"No active subscription found\" });\r\n  }\r\n\r\n  if (!activeSubscription.isActive || activeSubscription.endDate < new Date()) {\r\n    await activeSubscription.updateOne({\r\n      isActive: false,\r\n    });\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ msg: \"Your subscription has expired\" });\r\n  }\r\n\r\n  if (activeSubscription.paketId == \"PAK001\") {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ message: \"This paket can't be renewed\" });\r\n  }\r\n\r\n  const paket = await Paket.findOne({\r\n    where: {\r\n      Paket_id: activeSubscription.paketId,\r\n    },\r\n  });\r\n\r\n  if (!paket) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ message: \"Invalid paket\" });\r\n  }\r\n\r\n  // Check balance\r\n  const totalCost = paket.Paket_price * parseInt(month);\r\n  if (user.balance < totalCost) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ message: \"Not enough balance! Please top up first\" });\r\n  }\r\n\r\n  // Update balance\r\n  try {\r\n    user.balance -= totalCost;\r\n    await user.save();\r\n  } catch (error) {\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ message: \"Internal server error\" });\r\n  }\r\n\r\n  // Update subscription endDate\r\n  let endDate = new Date(activeSubscription.endDate);\r\n  endDate.setMonth(endDate.getMonth() + parseInt(month));\r\n\r\n  activeSubscription.endDate = endDate;\r\n\r\n  try {\r\n    await activeSubscription.save();\r\n  } catch (error) {\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ message: \"Failed to update subscription\" });\r\n  }\r\n\r\n  return res\r\n    .status(RESPONSE_STATUS.SUCCESS)\r\n    .json({ subscription: activeSubscription });\r\n};\r\n\r\n//admin\r\nexport const getAllUser = async (req: Request, res: Response) => {\r\n  const { username, email, fullName, role } = req.query;\r\n\r\n  // Construct the query object\r\n  const query: any = {};\r\n\r\n  if (typeof username === \"string\") {\r\n    query.username = { $regex: new RegExp(username) }; // Case-sensitive\r\n  }\r\n  if (typeof email === \"string\") {\r\n    query.email = { $regex: new RegExp(email) }; // Case-sensitive\r\n  }\r\n  if (typeof fullName === \"string\") {\r\n    query.fullName = { $regex: new RegExp(fullName) }; // Case-sensitive\r\n  }\r\n  if (typeof role === \"string\") {\r\n    query.role = role;\r\n  }\r\n\r\n  try {\r\n    const users = await User.find(query);\r\n    return res.status(RESPONSE_STATUS.SUCCESS).json({ users });\r\n  } catch (error) {\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ message: \"Failed to fetch users\" });\r\n  }\r\n};\r\n\r\nexport const adminDashboard = async (req: Request, res: Response) => {\r\n  // const { user } = req as any; // TODO : CHECK IF NECESSARY\r\n  const users = await User.find({\r\n    role: { $eq: ROLE.USER },\r\n    isEmailVerified: true,\r\n  }).exec();\r\n  const transactions = await Transaction.find({ header: { adminId: null } });\r\n  // transaction through top up\r\n  const totalIncome = transactions.reduce(\r\n    (acc, transaction) =>\r\n      acc +\r\n      transaction.details.reduce(\r\n        (acc, detail) =>\r\n          detail.transactionDetailType === TransactionDetailType.USER_TOPUP\r\n            ? acc + detail.subtotal\r\n            : acc,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n  //transaction through subscription\r\n  const totalSpend = transactions.reduce(\r\n    (acc, transaction) =>\r\n      acc +\r\n      transaction.details.reduce(\r\n        (acc, detail) =>\r\n          detail.transactionDetailType === TransactionDetailType.USER_SUBSCRIBE || detail.transactionDetailType === TransactionDetailType.USER_RENEW\r\n            ? acc + detail.subtotal\r\n            : acc,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n  const totalTransactionAmount =\r\n    transactions == null\r\n      ? 0\r\n      : transactions.reduce(\r\n          (acc, transaction) => acc + transaction.header.total,\r\n          0\r\n        );\r\n  const subscription = await Subscription.find({ isActive: true }).exec();\r\n  return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n    total_user: users.length,\r\n    free_package_user: subscription.filter((item) => item.paketId == \"PAK001\")\r\n      .length,\r\n    non_free_package_user: subscription.filter(\r\n      (item) => item.paketId != \"PAK001\"\r\n    ).length,\r\n    total_income: totalIncome,\r\n    total_user_spend: totalSpend,\r\n    total_transaction_amount: totalTransactionAmount,\r\n  });\r\n};\r\n\r\nexport const getUserProfile = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const user = await User.findOne({ _id: userID });\r\n  if (!user)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User not found\" });\r\n  return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n    username: user.username,\r\n    full_name: user.fullName,\r\n    email: user.email,\r\n    phone: user.phone,\r\n    balance: user.balance,\r\n  });\r\n};\r\n\r\nexport const getUserProfilePicture = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const user = await User.findOne({ _id: userID });\r\n  if (!user)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User not found\" });\r\n  return res.sendFile(user.profilePicture, { root: \".\" });\r\n};\r\n\r\nexport const deleteUserProfile = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const user = await User.findOne({ _id: userID });\r\n  if (!user)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User not found\" });\r\n  const subscription = await Subscription.findOne({\r\n    userId: userID,\r\n    isActive: true,\r\n  });\r\n  if (subscription) await subscription.updateOne({ isActive: false });\r\n  await User.deleteOne({ _id: user._id });\r\n  return res\r\n    .status(RESPONSE_STATUS.SUCCESS)\r\n    .json({ msg: `User \"${user.username}\" deleted successfully` });\r\n};\r\n\r\nexport const getUserPacket = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const user = await User.findOne({ _id: userID });\r\n  if (!user)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User not found\" });\r\n  const subscription = await Subscription.findOne({\r\n    userId: userID,\r\n    isActive: true,\r\n  });\r\n  if (!subscription)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User doesn't have any subscription\" });\r\n  const packet = await Paket.findOne({\r\n    where: { Paket_id: subscription.paketId },\r\n  });\r\n  if (!packet)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"Packet not found\" });\r\n  return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n    username: user.username,\r\n    nama: user.fullName,\r\n    subscription_start: subscription.startDate,\r\n    subscription_end: subscription.endDate,\r\n    packet: packet,\r\n  });\r\n};\r\n\r\nexport const addUserPacket = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const admin = (req as any).user;\r\n  const subscriptions = req.body; // This should be an array of { paket_id, month }\r\n\r\n  if (!Array.isArray(subscriptions)) {\r\n    return res.status(RESPONSE_STATUS.BAD_REQUEST).json({\r\n      message: \"Invalid request format. Expected an array of subscriptions.\",\r\n    });\r\n  }\r\n\r\n  const session = await mongoose.startSession();\r\n  session.startTransaction();\r\n\r\n  try {\r\n    const users =\r\n      userID === \"ALL\"\r\n        ? await User.find({ isEmailVerified: true, role: ROLE.USER })\r\n        : [await User.findOne({ _id: userID })];\r\n\r\n    if (users.length === 0 || users[0] === null) {\r\n      return res\r\n        .status(RESPONSE_STATUS.NOT_FOUND)\r\n        .json({ msg: \"User not found\" });\r\n    }\r\n\r\n    const transactionDetails = [];\r\n\r\n    for (const user of users) {\r\n      for (const sub of subscriptions) {\r\n        const { paket_id, month } = sub;\r\n\r\n        if (!paket_id || month === undefined) {\r\n          throw {\r\n            status: RESPONSE_STATUS.BAD_REQUEST,\r\n            message: `Request fields not valid`,\r\n          };\r\n        }\r\n\r\n        if (month < 1) {\r\n          throw {\r\n            status: RESPONSE_STATUS.BAD_REQUEST,\r\n            message: `Invalid number of months for paket: ${paket_id}`,\r\n          };\r\n        }\r\n\r\n        const paket = await Paket.findOne({\r\n          where: {\r\n            Paket_id: paket_id,\r\n          },\r\n        });\r\n\r\n        if (!paket) {\r\n          throw {\r\n            status: RESPONSE_STATUS.NOT_FOUND,\r\n            message: `Paket not found: ${paket_id}`,\r\n          };\r\n        }\r\n\r\n        // Deactivate current active subscription if it exists\r\n        const activeSubscription = await Subscription.findOne({\r\n          userId: userID,\r\n          isActive: true,\r\n        });\r\n        if (activeSubscription) {\r\n          await activeSubscription.updateOne({ isActive: false });\r\n        }\r\n\r\n        let endDate = new Date();\r\n        endDate.setMonth(endDate.getMonth() + month);\r\n        endDate.setDate(endDate.getDate() - 1);\r\n        endDate.setHours(23);\r\n        endDate.setMinutes(59);\r\n        endDate.setSeconds(59);\r\n\r\n        const apiKey = await generateApiKey();\r\n\r\n        // Create new subscription\r\n        const subs = new Subscription({\r\n          userId: user?._id,\r\n          paketId: paket_id,\r\n          endDate,\r\n          apiKey,\r\n          resetAt: new Date(new Date().getTime() + 60 * 1000),\r\n        });\r\n        const newSubscription = await subs.save({ session });\r\n\r\n        transactionDetails.push({\r\n          transactionDetailType: TransactionDetailType.ADMIN_SUBSCRIBE,\r\n          paket_id: paket.Paket_id,\r\n          subscription_id: newSubscription._id,\r\n          month: month,\r\n          price: paket.Paket_price,\r\n          subtotal: paket.Paket_price * month,\r\n          message: `Admin: ${admin.username}, gave ${user?.username} a subscription to ${paket.Paket_name} for ${month} month(s) at Rp${paket.Paket_price} per month.`,\r\n        });\r\n      }\r\n\r\n      // Insert transaction log\r\n      const transaction = new Transaction({\r\n        header: {\r\n          transactionHeaderType: TransactionHeaderType.SUBSCRIBE,\r\n          date: new Date(),\r\n          total: transactionDetails.reduce(\r\n            (acc, detail) => acc + detail.subtotal,\r\n            0\r\n          ),\r\n          userId: user?._id,\r\n          adminId: admin._id,\r\n        },\r\n        details: transactionDetails,\r\n      });\r\n      await transaction.save({ session });\r\n\r\n      await session.commitTransaction();\r\n      session.endSession();\r\n\r\n      return res.status(RESPONSE_STATUS.CREATED).json({\r\n        message: \"All subscriptions created successfully\",\r\n        transaction: transaction.header,\r\n        subscriptions: transactionDetails,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n\r\n    // Ensure the error has status and message properties\r\n    const status =\r\n      (error as any).status || RESPONSE_STATUS.INTERNAL_SERVER_ERROR;\r\n    const errorMessage = (error as any).message || \"Internal server error\";\r\n\r\n    return res.status(status).json({ message: errorMessage });\r\n  }\r\n};\r\n\r\nexport const deleteUserPacket = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const user = await User.findOne({ _id: userID });\r\n  if (!user)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User not found\" });\r\n  const subscription = await Subscription.findOne({\r\n    userId: userID,\r\n    isActive: true,\r\n  });\r\n  if (!subscription)\r\n    return res\r\n      .status(RESPONSE_STATUS.NOT_FOUND)\r\n      .json({ msg: \"User doesn't have any subscription\" });\r\n  await subscription.updateOne({ isActive: false });\r\n  return res\r\n    .status(RESPONSE_STATUS.SUCCESS)\r\n    .json({ msg: \"Subscription deleted successfully\" });\r\n};\r\n\r\nexport const addExercise = async (req: Request, res: Response) => {\r\n  try {\r\n    // Fetch data from external API\r\n    // const exercises: any[] = await Apis.API_NINJA_ApiService.get<any[]>(\"\");\r\n    const { offset, limit_per_ten } = req.query;\r\n\r\n    // Make API call\r\n    const parsedOffset = Math.floor(Number(offset));\r\n    const parsedLimit = Math.floor(Number(limit_per_ten));\r\n\r\n    if (\r\n      isNaN(parsedOffset) ||\r\n      isNaN(parsedLimit) ||\r\n      parsedLimit < 0 ||\r\n      parsedOffset < 0\r\n    ) {\r\n      return res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .json({ msg: \"Offset and limit must be non-negative integers.\" });\r\n    }\r\n\r\n    const queryParams: any = {};\r\n    for (let i = parsedOffset; i < parsedOffset + parsedLimit; i++) {\r\n      queryParams.offset = i * 10;\r\n      let exercises: any[] = await Apis.API_NINJA_ApiService.get(\"\", {\r\n        params: queryParams,\r\n      });\r\n      for (const exercise of exercises) {\r\n        // Check if the exercise already exists in the database\r\n        const existingExercise = await Exercise.findOne({\r\n          name: exercise.name,\r\n        });\r\n\r\n        // If the exercise does not exist, insert it into the database\r\n        if (!existingExercise) {\r\n          const newExercise = new Exercise({\r\n            name: exercise.name,\r\n            type: exercise.type,\r\n            targeted_muscle: exercise.muscle,\r\n            equipmentRequired: exercise.equipment ? exercise.equipment : \"-\",\r\n            description: exercise.instructions,\r\n          });\r\n          await newExercise.save();\r\n        }\r\n      }\r\n    }\r\n\r\n    return res\r\n      .status(RESPONSE_STATUS.SUCCESS)\r\n      .json({ msg: \"Exercises have been added/updated successfully.\" });\r\n  } catch (error) {\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ msg: \"Exercises added/updated failed.\" });\r\n  }\r\n};\r\n\r\nexport const topupFromAdmin = async (req: Request, res: Response) => {\r\n  const { userID } = req.params;\r\n  const { saldo } = req.body;\r\n  const admin = (req as any).user;\r\n\r\n  if (!saldo) {\r\n    return res\r\n      .status(RESPONSE_STATUS.BAD_REQUEST)\r\n      .json({ msg: \"Saldo is required\" });\r\n  }\r\n\r\n  const session = await mongoose.startSession();\r\n  session.startTransaction();\r\n\r\n  try {\r\n    const schema = topupSchema;\r\n    await schema.validateAsync({ saldo });\r\n    if (userID && mongoose.Types.ObjectId.isValid(userID)) {\r\n      const user = await User.findById(userID).session(session);\r\n      if (!user) {\r\n        throw new Error(\"User not found\");\r\n      }\r\n      if (user.role === ROLE.ADMIN) {\r\n        throw new Error(\"User is admin\");\r\n      }\r\n\r\n      user.balance += saldo;\r\n      await user.save({ session });\r\n\r\n      const transactionHeader: ITransationHeaderAdmin = {\r\n        transactionHeaderType: TransactionHeaderType.TOPUP,\r\n        date: new Date(),\r\n        total: saldo,\r\n        userId: user._id,\r\n        adminId: admin._id,\r\n      };\r\n\r\n      const transactionDetails: ITransactionTopUpDetail[] = [\r\n        {\r\n          transactionDetailType: TransactionDetailType.ADMIN_TOPUP,\r\n          subtotal: saldo,\r\n          message: `Admin ${admin.fullName} topped up user ${user.fullName} with saldo ${saldo}`,\r\n        },\r\n      ];\r\n\r\n      const transaction: ITransaction = {\r\n        header: transactionHeader,\r\n        details: transactionDetails,\r\n      };\r\n\r\n      await Transaction.create([transaction], { session });\r\n\r\n      await session.commitTransaction();\r\n      session.endSession();\r\n\r\n      return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n        msg: \"Balance updated successfully\",\r\n        username: user.username,\r\n        full_name: user.fullName,\r\n        newBalance: user.balance,\r\n      });\r\n    } else if (userID === \"ALL\") {\r\n      const users = await User.find({\r\n        role: ROLE.USER,\r\n        isEmailVerified: true,\r\n      }).session(session);\r\n\r\n      const bulkOps = users.map((user) => ({\r\n        updateOne: {\r\n          filter: { _id: user._id },\r\n          update: { $inc: { balance: saldo } },\r\n        },\r\n      }));\r\n\r\n      await User.bulkWrite(bulkOps, { session });\r\n      const transactionHeader: ITransationHeaderAdmin = {\r\n        transactionHeaderType: TransactionHeaderType.TOPUP,\r\n        date: new Date(),\r\n        total: saldo,\r\n        adminId: admin._id,\r\n      };\r\n      const transactionDetails: ITransactionTopUpDetail[] = users.map(\r\n        (user) => ({\r\n          transactionDetailType: TransactionDetailType.ADMIN_TOPUP,\r\n          subtotal: saldo,\r\n          userId: user._id,\r\n          message: `Admin ${admin.fullName} topped up user ${user.fullName} with saldo ${saldo}`,\r\n        })\r\n      );\r\n\r\n      const transaction: ITransaction = {\r\n        header: transactionHeader,\r\n        details: transactionDetails,\r\n      };\r\n\r\n      await Transaction.create([transaction], { session });\r\n\r\n      await session.commitTransaction();\r\n      session.endSession();\r\n\r\n      return res.status(RESPONSE_STATUS.SUCCESS).json({\r\n        msg: \"Balance updated for all users successfully\",\r\n      });\r\n    } else {\r\n      throw new Error(\"Invalid userID\");\r\n    }\r\n  } catch (error: any) {\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n\r\n    const errorMsg =\r\n      error instanceof Error ? error.message : \"Internal Server Error\";\r\n    const status =\r\n      error.message === \"User not found\"\r\n        ? RESPONSE_STATUS.NOT_FOUND\r\n        : RESPONSE_STATUS.BAD_REQUEST;\r\n\r\n    return res.status(status).json({ msg: errorMsg });\r\n  }\r\n};\r\n","import { NextFunction, Request, Response } from \"express\";\r\nimport { verifyAccessToken } from \"../utils/AuthUtils\";\r\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\r\nimport { User } from \"../models/dynamic/User.model\";\r\n\r\nexport const validateAccessToken = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const token = req.headers.authorization;\r\n  if (!token) {\r\n    return res.status(RESPONSE_STATUS.UNAUTHORIZED).send(\"Unauthorized\");\r\n  }\r\n  const [prefix, accessToken] = token.split(\" \");\r\n  if (prefix != \"Bearer\") {\r\n    return res.status(RESPONSE_STATUS.UNAUTHORIZED).send(\"Unauthorized\");\r\n  }\r\n  try {\r\n    const decodedToken = verifyAccessToken(accessToken);\r\n    if (!decodedToken) {\r\n      return res.status(RESPONSE_STATUS.UNAUTHORIZED).send(\"Unauthorized\");\r\n    }\r\n    const { username, email } = decodedToken;\r\n    try {\r\n      const user = await User.findOne({ $or: [{ username }, { email }] });\r\n      if (user) {\r\n        (req as any).user = user;\r\n        next();\r\n      } else {\r\n        return res\r\n          .status(RESPONSE_STATUS.NOT_FOUND)\r\n          .json({ msg: \"User not found\" });\r\n      }\r\n    } catch (error) {\r\n      return res\r\n        .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n        .json({ msg: \"Internal server error\" });\r\n    }\r\n  } catch (error) {\r\n    return res.status(RESPONSE_STATUS.UNAUTHORIZED).send(\"Unauthorized\");\r\n  }\r\n};\r\n\r\nexport const validateAdmin = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const { user } = req.body;\r\n  if (user && user.role != \"ADMIN\")\r\n    return res\r\n      .status(RESPONSE_STATUS.UNAUTHORIZED)\r\n      .json({ msg: \"User is not admin\" });\r\n  next();\r\n};\r\n\r\nexport const validateIsNotAdmin = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const user = (req as any).user;\r\n  if (user && user.role == \"ADMIN\")\r\n    return res\r\n      .status(RESPONSE_STATUS.UNAUTHORIZED)\r\n      .json({ msg: \"Only Customers Are Allowed!\" });\r\n  next();\r\n};\r\n\r\nexport const validateNotSignIn = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const token = req.headers.authorization;\r\n  if (token) {\r\n    return res.status(RESPONSE_STATUS.UNAUTHORIZED).send(\"Please Logout First!\");\r\n  }\r\n  next();\r\n};\r\n","import { Request, Response, NextFunction } from \"express\";\r\nimport { Schema } from \"joi\";\r\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\r\n\r\nexport const validateBody = (schema: Schema) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.validateAsync(req.body);\r\n      next();\r\n    } catch (err: any) {\r\n      res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .send({ error: err.details[0].message });\r\n    }\r\n  };\r\n};\r\n\r\nexport const validateParams = (schema: Schema) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.validateAsync(req.params);\r\n      next();\r\n    } catch (err: any) {\r\n      res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .send({ error: err.details[0].message });\r\n    }\r\n  };\r\n};\r\n\r\nexport const validateQuery = (schema: Schema) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.validateAsync(req.query);\r\n      next();\r\n    } catch (err: any) {\r\n      res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .send({ error: err.details[0].message });\r\n    }\r\n  };\r\n};\r\n\r\nexport const validateCookie = (schema: Schema) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await schema.validateAsync(req.cookies);\r\n      next();\r\n    } catch (err: any) {\r\n      res\r\n        .status(RESPONSE_STATUS.BAD_REQUEST)\r\n        .send({ error: err.details[0].message });\r\n    }\r\n  };\r\n};\r\n","// FitnessRelated.enum.ts\r\nexport const FITNESS_GOALS = {\r\n  WEIGHT_LOSS: {\r\n    code: \"WEIGHT_LOSS\",\r\n    title: \"Weight Loss\",\r\n    description: \"Reduce body weight through a combination of diet, exercise, and lifestyle changes.\",\r\n    activities: \"Running, Swimming, Cycling, High-Intensity Interval Training (HIIT)\"\r\n  },\r\n  WEIGHT_GAIN: {\r\n    code: \"WEIGHT_GAIN\",\r\n    title: \"Weight Gain\",\r\n    description: \"Increase body weight through a balanced approach of nutrition and muscle-building exercises.\",\r\n    activities: \"Weightlifting, Deadlifts, Bench Press, Squats\"\r\n  },\r\n  BODY_BUILDING: {\r\n    code: \"BODY_BUILDING\",\r\n    title: \"Body Building\",\r\n    description: \"Develop and sculpt muscle mass with a focus on symmetry and aesthetics.\",\r\n    activities: \"Bodyweight Exercises, Bicep Curls, Tricep Extensions, Leg Press\"\r\n  },\r\n  MUSCLE_GAIN: {\r\n    code: \"MUSCLE_GAIN\",\r\n    title: \"Muscle Gain\",\r\n    description: \"Increase muscle mass and strength through progressive resistance training and proper nutrition.\",\r\n    activities: \"Pull-Ups, Push-Ups, Dumbbell Rows, Shoulder Press\"\r\n  },\r\n  ENDURANCE_TRAINING: {\r\n    code: \"ENDURANCE_TRAINING\",\r\n    title: \"Endurance Training\",\r\n    description: \"Improve cardiovascular and muscular endurance to enhance overall stamina and performance.\",\r\n    activities: \"Long-Distance Running, Cycling, Rowing, Jump Rope\"\r\n  },\r\n  FLEXIBILITY_IMPROVEMENT: {\r\n    code: \"FLEXIBILITY_IMPROVEMENT\",\r\n    title: \"Flexibility Improvement\",\r\n    description: \"Enhance the range of motion in joints and muscles to improve overall flexibility and reduce injury risk.\",\r\n    activities: \"Yoga, Pilates, Dynamic Stretching, Static Stretching\"\r\n  },\r\n  GENERAL_FITNESS: {\r\n    code: \"GENERAL_FITNESS\",\r\n    title: \"General Fitness\",\r\n    description: \"Maintain overall health and wellness through a balanced mix of exercise, diet, and lifestyle habits.\",\r\n    activities: \"Walking, Jogging, Bodyweight Exercises, Swimming\"\r\n  },\r\n  STRESS_RELIEF: {\r\n    code: \"STRESS_RELIEF\",\r\n    title: \"Stress Relief\",\r\n    description: \"Reduce stress and improve mental well-being through physical activities and relaxation techniques.\",\r\n    activities: \"Tai Chi, Breathing Exercises, Light Yoga, Meditation\"\r\n  }\r\n};","import { Schema } from \"joi\";\r\nimport { JoiExtended } from \".\";\r\nimport { FITNESS_GOALS } from \"../contracts/enum/FitnessRelated.enum\";\r\n\r\nexport const registerSchemaJoi: Schema = JoiExtended.object({\r\n  username: JoiExtended.string().required().messages({\r\n    \"any.required\": \"Username is required\",\r\n  }),\r\n  email: JoiExtended.string().email().required().messages({\r\n    \"any.required\": \"Email is required\",\r\n    \"string.email\": \"Email must be a valid email address\",\r\n  }),\r\n  password: JoiExtended.string().required().messages({\r\n    \"any.required\": \"Password is required\",\r\n  }),\r\n  fullName: JoiExtended.string().required().messages({\r\n    \"any.required\": \"Full name is required\",\r\n  }),\r\n  phone: JoiExtended.string()\r\n    .pattern(/^[0-9]{10,15}$/)\r\n    .required()\r\n    .messages({\r\n      \"any.required\": \"Phone number is required\",\r\n      \"string.pattern.base\": \"Phone number must be between 10 and 15 digits\",\r\n    }),\r\n});\r\n\r\nexport const editProfileSchemaJoi = JoiExtended.object({\r\n  old_password: JoiExtended.string().optional().allow(\"\"),\r\n  new_password: JoiExtended.string().optional().allow(\"\"),\r\n  confirm_password: JoiExtended.string().optional().allow(\"\"),\r\n  fullName: JoiExtended.string().optional().allow(\"\"),\r\n  phone: JoiExtended.string()\r\n    .optional()\r\n    .allow(\"\")\r\n    .pattern(/^[0-9]{10,15}$/)\r\n    .messages({\r\n      \"string.pattern.base\": \"Phone number must be between 10 and 15 digits\",\r\n    }),\r\n  age: JoiExtended.number().integer().positive().optional().allow(\"\").messages({\r\n    \"number.base\": \"Age must be a number\",\r\n    \"number.integer\": \"Age must be an integer\",\r\n    \"number.positive\": \"Age must be a positive number\",\r\n  }),\r\n  gender: JoiExtended.string().optional().allow(\"\"),\r\n  height: JoiExtended.number().positive().optional().allow(\"\").messages({\r\n    \"number.base\": \"Height must be a number\",\r\n    \"number.positive\": \"Height must be a positive number\",\r\n  }),\r\n  weight: JoiExtended.number().positive().optional().allow(\"\").messages({\r\n    \"number.base\": \"Weight must be a number\",\r\n    \"number.positive\": \"Weight must be a positive number\",\r\n  }),\r\n  fitnessGoals: JoiExtended.string()\r\n    .valid(...Object.values(FITNESS_GOALS))\r\n    .optional()\r\n    .allow(\"\")\r\n    .messages({\r\n      \"any.only\": `Fitness goals must be one of ${Object.values(\r\n        FITNESS_GOALS\r\n      )}`,\r\n    }),\r\n  healthInformation: JoiExtended.string().optional().allow(\"\"),\r\n}).unknown();\r\n\r\nexport const loginSchemaJoi = JoiExtended.object({\r\n  username: JoiExtended.string().empty(\"\").messages({\r\n    \"string.empty\": \"Username must not be empty\",\r\n  }),\r\n  email: JoiExtended.string().email().empty(\"\").messages({\r\n    \"string.email\": \"Please enter a valid email address\",\r\n  }),\r\n  password: JoiExtended.string().required().messages({\r\n    \"any.required\": \"Password is a required field\",\r\n  }),\r\n  rememberMe: JoiExtended.boolean().optional(),\r\n})\r\n  .xor(\"username\", \"email\")\r\n  .messages({\r\n    \"object.missing\": \"Username or email is required for login\",\r\n  });\r\n\r\nexport const validationTokenSchemaJoi = JoiExtended.object({\r\n  refreshToken: JoiExtended.string().required().messages({\r\n    \"string.base\": \"**refreshToken** must be a string\",\r\n    \"string.empty\": \"**refreshToken** cannot be empty\",\r\n    \"any.required\": \"**refreshToken** is a required field\",\r\n  }),\r\n});\r\n","import { Request, Response } from \"express\";\r\nimport Paket from \"../models/static/Paket.model\";\r\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\r\n\r\nexport const getAllPricingPackages = async (req: Request, res: Response) => {\r\n  try {\r\n    console.log(\"MASUK\");\r\n\r\n    const pakets = await Paket.findAll();\r\n    console.log(pakets);\r\n\r\n    return res.status(RESPONSE_STATUS.SUCCESS).json(pakets);\r\n  } catch (error) {\r\n    console.error(\"Error retrieving pricing packages:\", error);\r\n    return res\r\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\r\n      .json({ message: \"Failed to retrieve pricing packages\" });\r\n  }\r\n};\r\n","import { Request, Response } from \"express\";\nimport {\n  createAccessToken,\n  createRefreshToken,\n  generateEmailVerificationToken,\n  hashPassword,\n  sendVerificationEmail,\n  verifyEmailVerificationToken,\n  verifyPassword,\n  verifyRefreshToken,\n} from \"../utils/AuthUtils\";\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\nimport { User } from \"../models/dynamic/User.model\";\nimport { JwtPayload } from \"jsonwebtoken\";\nimport mongoose from \"mongoose\";\nimport axios from \"axios\";\nimport { ENV } from \"../config/environment\";\nimport { Apis } from \"../services/ApiService\";\nimport Joi from \"joi\";\nimport { FITNESS_GOALS } from \"../contracts/enum/FitnessRelated.enum\";\n\nexport const getExercise = async (req: Request, res: Response) => {\n  try {\n    // Extract body parameters\n    const { exercise, type, muscle, difficulty } = req.query;\n\n    // Extract page from body with default value of 0\n    let page = req.query.page ?? 0;\n\n    // Define valid types and muscles for validation\n    const validTypes = [\n      \"cardio\",\n      \"olympic_weightlifting\",\n      \"plyometrics\",\n      \"powerlifting\",\n      \"strength\",\n      \"stretching\",\n      \"strongman\",\n    ];\n\n    const validMuscles = [\n      \"abdominals\",\n      \"abductors\",\n      \"adductors\",\n      \"biceps\",\n      \"calves\",\n      \"chest\",\n      \"forearms\",\n      \"glutes\",\n      \"hamstrings\",\n      \"lats\",\n      \"lower_back\",\n      \"middle_back\",\n      \"neck\",\n      \"quadriceps\",\n      \"traps\",\n      \"triceps\",\n    ];\n\n    const validDifficulty = [\"beginner\", \"intermediate\", \"expert\"];\n\n    // Define schemas for validation\n    const typeSchema = Joi.string()\n      .valid(...validTypes)\n      .insensitive();\n    const muscleSchema = Joi.string()\n      .valid(...validMuscles)\n      .insensitive();\n    const difficultySchema = Joi.string()\n      .valid(...validDifficulty)\n      .insensitive();\n\n    // Validate type, muscle, and difficulty\n    if (type) {\n      const { error } = typeSchema.validate(type);\n      if (error) {\n        const errorMessage = `Type not valid. Valid types are: ${validTypes.join(\n          \", \"\n        )}`;\n        return res\n          .status(RESPONSE_STATUS.BAD_REQUEST)\n          .json({ error: errorMessage });\n      }\n    }\n\n    if (muscle) {\n      const { error } = muscleSchema.validate(muscle);\n      if (error) {\n        const errorMessage = `Muscle not valid. Valid muscles are: ${validMuscles.join(\n          \", \"\n        )}`;\n        return res\n          .status(RESPONSE_STATUS.BAD_REQUEST)\n          .json({ error: errorMessage });\n      }\n    }\n\n    if (difficulty) {\n      const { error } = difficultySchema.validate(difficulty);\n      if (error) {\n        const errorMessage = `Difficulty not valid. Valid difficulty levels are: ${validDifficulty.join(\n          \", \"\n        )}`;\n        return res\n          .status(RESPONSE_STATUS.BAD_REQUEST)\n          .json({ error: errorMessage });\n      }\n    }\n\n    // Build query parameters object\n    const queryParams: any = {};\n    if (exercise) queryParams.name = exercise;\n    if (type) queryParams.type = type;\n    if (muscle) queryParams.muscle = muscle;\n    if (difficulty) queryParams.difficulty = difficulty;\n    queryParams.offset = page;\n\n    console.log(\"Query Parameters:\", queryParams);\n\n    // Make API call\n    const response = await Apis.API_NINJA_ApiService.get(\"\", {\n      params: queryParams,\n    });\n\n    console.log(\"API Response:\", response);\n\n    // Check for empty response\n    if ((response as any).length < 1) {\n      return res\n        .status(RESPONSE_STATUS.NOT_FOUND)\n        .json({ error: `Exercise Not Found!` });\n    }\n\n    // Return successful response\n    return res.status(RESPONSE_STATUS.SUCCESS).json({ exercise: response });\n  } catch (error: any) {\n    console.error(\"Request failed:\", error);\n    return res.status(RESPONSE_STATUS.NOT_FOUND).json({ error: error.message });\n  }\n};\n\nexport const getAllGoals = async (req: Request, res: Response) => {\n  try {\n    const goalsBrief = Object.values(FITNESS_GOALS).map((goal) => ({\n      title: goal.title,\n      description: goal.description,\n    }));\n\n    return res.status(RESPONSE_STATUS.SUCCESS).json({ Goal_list: goalsBrief });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getGoalByTitle = async (req: Request, res: Response) => {\n  try {\n    const goalTitle = req.params.title.toLowerCase();\n    const goal = Object.values(FITNESS_GOALS).find(\n      (goal) => goal.title.toLowerCase() === goalTitle\n    );\n\n    if (goal) {\n      return res.status(RESPONSE_STATUS.SUCCESS).json({ Goal: goal });\n    } else {\n      res.status(RESPONSE_STATUS.NOT_FOUND).json({ message: \"Goal not found\" });\n    }\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ message: \"Internal server error\" });\n  }\n};\n","export enum PlansStatus {\r\n  PENDING = \"PENDING\",\r\n  STARTED = \"STARTED\",\r\n  COMPLETED = \"COMPLETED\",\r\n  CANCELLED = \"CANCELLED\",\r\n}\r\n","import mongoose, { Schema, Model } from \"mongoose\";\nimport { IPlans } from \"../../contracts/dto/PlansRelated.dto\";\nimport { PlansStatus } from \"../../contracts/enum/PlansRelated.enum\";\nimport { FITNESS_GOALS } from \"../../contracts/enum/FitnessRelated.enum\";\n\nconst FITNESS_GOAL_CODES = Object.values(FITNESS_GOALS).map(goal => goal.code);\n\nconst PlansSchema: Schema = new Schema({\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  goals: [\n    {\n      type: String,\n      required: false,\n      enum: FITNESS_GOAL_CODES,\n    },\n  ],\n  durationInWeeks: { type: Number, required: true },\n  frequencyPerWeek: { type: Number, required: true },\n  restDaysPerWeek: { type: Number, required: true },\n  intensity: { type: Number, required: true },\n  exercises: [{ type: Schema.Types.ObjectId, ref: \"ExercisePlan\" }],\n  nutritionPlan: { type: Schema.Types.ObjectId, ref: \"NutritionPlan\" },\n  createdBy: { type: String, required: true },\n  createdDate: { type: Date, required: true, default: Date.now },\n  status: {\n    type: String,\n    enum: Object.values(PlansStatus),\n    default: PlansStatus.PENDING,\n  },\n});\n\nexport const Plans: Model<IPlans> = mongoose.model<IPlans>(\n  \"Plans\",\n  PlansSchema\n);\n","import { Request, Response } from \"express\";\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\nimport { IPlans } from \"../contracts/dto/PlansRelated.dto\";\nimport { Plans } from \"../models/dynamic/Plans.model\";\nimport { PlansStatus } from \"../contracts/enum/PlansRelated.enum\";\nimport { FITNESS_GOALS } from \"../contracts/enum/FitnessRelated.enum\";\nimport { User } from \"../models/dynamic/User.model\";\nimport { Exercise, ExercisePlan } from \"../models/dynamic/Exercise.model\";\nimport mongoose from \"mongoose\";\n\n// Create Exercise Plan\nexport const createExercisePlan = async (req: Request, res: Response) => {\n  const {\n    name,\n    description,\n    goals,\n    durationInWeeks,\n    frequencyPerWeek,\n    restDaysPerWeek,\n    intensity,\n    exercises,\n    nutritionPlan,\n  } = req.body;\n\n  try {\n    const newPlan: IPlans = new Plans({\n      name,\n      description,\n      goals,\n      durationInWeeks,\n      frequencyPerWeek,\n      restDaysPerWeek,\n      intensity,\n      exercises,\n      nutritionPlan,\n      createdBy: (req as any).user.username,\n      status: PlansStatus.PENDING,\n    });\n    const savedPlan = await newPlan.save();\n\n    return res.status(RESPONSE_STATUS.CREATED).json({\n      msg: \"Exercise plan created successfully\",\n      plan: savedPlan,\n    });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ msg: \"Internal server error\", error });\n  }\n};\n// /users/plan/edit\nexport const editExercisePlan = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const user = (req as any).user;\n  const {\n    name,\n    description,\n    goals,\n    durationInWeeks,\n    frequencyPerWeek,\n    restDaysPerWeek,\n    intensity,\n    exercises,\n    nutritionPlan,\n  } = req.body;\n\n  try {\n    const plan = await Plans.findById(id);\n\n    if (!plan) {\n      return res\n        .status(RESPONSE_STATUS.NOT_FOUND)\n        .json({ msg: \"Plan not found\" });\n    }\n    if (plan.createdBy != user.username) {\n      return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n    }\n\n    if (name) plan.name = name;\n    if (description) plan.description = description;\n    if (goals) plan.goals = goals;\n    if (durationInWeeks) plan.durationInWeeks = durationInWeeks;\n    if (frequencyPerWeek) plan.frequencyPerWeek = frequencyPerWeek;\n    if (restDaysPerWeek) plan.restDaysPerWeek = restDaysPerWeek;\n    if (intensity) plan.intensity = intensity;\n    if (exercises) plan.exercises = exercises;\n    if (nutritionPlan) plan.nutritionPlan = nutritionPlan;\n\n    const updatedPlan = await plan.save();\n\n    return res.status(RESPONSE_STATUS.SUCCESS).json({\n      msg: \"Exercise plan updated successfully\",\n      plan: updatedPlan,\n    });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ msg: \"Internal server error\", error });\n  }\n};\n\nexport const startExercisePlan = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const user = (req as any).user;\n  try {\n    const plan = await Plans.findById(id);\n\n    if (!plan) {\n      return res\n        .status(RESPONSE_STATUS.NOT_FOUND)\n        .json({ msg: \"Plan not found\" });\n    }\n    if (plan.createdBy != user.username) {\n      return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n    }\n    // if there's an exercise\n    if (plan.exercises.length < 1) {\n      return res\n        .status(RESPONSE_STATUS.NOT_FOUND)\n        .json({ msg: \"No exercise in the plan\" });\n    }\n    if (plan.status == PlansStatus.STARTED) {\n      return res\n        .status(RESPONSE_STATUS.NOT_FOUND)\n        .json({ msg: \"Plan already started\" });\n    }\n\n    plan.status = PlansStatus.STARTED;\n\n    const updatedPlan = await plan.save();\n\n    return res.status(RESPONSE_STATUS.SUCCESS).json({\n      msg: \"Exercise plan started successfully\",\n      plan: updatedPlan,\n    });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ msg: \"Internal server error\", error });\n  }\n};\n\nexport const completeExercisePlan = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const user = (req as any).user;\n\n  try {\n    const plan = await Plans.findById(id);\n\n    if (!plan) {\n      return res\n        .status(RESPONSE_STATUS.NOT_FOUND)\n        .json({ msg: \"Plan not found\" });\n    }\n    if (plan.createdBy != user.username) {\n      return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n    }\n    plan.status = PlansStatus.COMPLETED;\n\n    const updatedPlan = await plan.save();\n\n    return res.status(RESPONSE_STATUS.NOT_FOUND).json({\n      msg: \"Exercise plan completed successfully\",\n      plan: updatedPlan,\n    });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ msg: \"Internal server error\", error });\n  }\n};\n\nexport const addWorkoutToExercisePlan = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const { exerciseId } = req.body;\n  const user = (req as any).user;\n\n  const plan = await Plans.findById(id);\n\n  if (!plan) {\n    return res\n      .status(RESPONSE_STATUS.NOT_FOUND)\n      .json({ msg: \"Plan not found\" });\n  }\n\n  if (plan.createdBy != user.username) {\n    return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n  }\n\n  const exercise = await ExercisePlan.findById(exerciseId);\n\n  if (!exercise) {\n    return res\n      .status(RESPONSE_STATUS.NOT_FOUND)\n      .json({ msg: \"Exercise not found\" });\n  }\n\n  plan.exercises.push(exercise);\n  await plan.save();\n\n  return res\n    .status(RESPONSE_STATUS.NOT_FOUND)\n    .json({ msg: \"Exercise added to plan successfully\" });\n};\n\nexport const exercisePlanDetails = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const user = (req as any).user;\n  const plan = await Plans.findById(id);\n\n  if (!plan) {\n    return res\n      .status(RESPONSE_STATUS.NOT_FOUND)\n      .json({ msg: \"Plan not found\" });\n  }\n  const userFromPlan = await User.findById(plan.createdBy);\n  if (userFromPlan?._id != user._id) {\n    return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n  }\n  return res.status(RESPONSE_STATUS.NOT_FOUND).json({ plan });\n};\n\nexport const getAllExercisePlanByUser = async (req: Request, res: Response) => {\n  const user = (req as any).user;\n  const plans = await Plans.find({\n    createdBy: user.username,\n  }).select(\"_id, name createdDate status\");\n\n  try {\n    return res.status(RESPONSE_STATUS.SUCCESS).json({ plans: plans });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ message: \"Internal server error\" });\n  }\n};\n\nexport const getExercisePlanDetailByUser = async (\n  req: Request,\n  res: Response\n) => {\n  const { id } = req.params;\n  const user = (req as any).user;\n  if (!mongoose.Types.ObjectId.isValid(id)) {\n    return res\n      .status(RESPONSE_STATUS.BAD_REQUEST)\n      .json({ message: \"Invalid ID\" });\n  }\n  const plan = await Plans.findById(id);\n\n  if (!plan) {\n    return res\n      .status(RESPONSE_STATUS.NOT_FOUND)\n      .json({ msg: \"Plan not found\" });\n  }\n\n  if (plan.createdBy != user.username) {\n    return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n  }\n\n  try {\n    return res.status(RESPONSE_STATUS.SUCCESS).json({ plan_detail: plan });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ message: \"Internal server error\" });\n  }\n};\n\nexport const pictureExercisePlanByUser = async (\n  req: Request,\n  res: Response\n) => {};\n\nexport const trackerExercisePlanByUser = async (\n  req: Request,\n  res: Response\n) => {};\n\nexport const cancelExercisePlanByUser = async (req: Request, res: Response) => {\n  const { id } = req.params;\n  const user = (req as any).user;\n  if (!mongoose.Types.ObjectId.isValid(id)) {\n    return res\n      .status(RESPONSE_STATUS.BAD_REQUEST)\n      .json({ message: \"Invalid ID\" });\n  }\n  const plan = await Plans.findById(id);\n\n  if (!plan) {\n    return res\n      .status(RESPONSE_STATUS.NOT_FOUND)\n      .json({ msg: \"Plan not found\" });\n  }\n\n  if (plan.createdBy != user.username) {\n    return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Not Your Plan\" });\n  }\n\n  if (plan.status !== \"PENDING\" && plan.status !== \"STARTED\") {\n    return res\n      .status(RESPONSE_STATUS.BAD_REQUEST)\n      .json({ msg: \"Plan status is already completed or cancelled\" });\n  }\n\n  try {\n    plan.status = PlansStatus.CANCELLED;\n    await plan.save();\n\n    return res\n      .status(RESPONSE_STATUS.SUCCESS)\n      .json({ message: \"Plan has been cancelled\" });\n  } catch (error) {\n    return res\n      .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n      .json({ message: \"Internal server error\" });\n  }\n};\n","import { JoiExtended } from \".\";\r\nimport { FITNESS_GOALS } from \"../contracts/enum/FitnessRelated.enum\";\r\n\r\nconst FITNESS_GOAL_CODES = Object.values(FITNESS_GOALS).map(goal => goal.code);\r\n\r\nexport const createUserPlanSchemaJoi = JoiExtended.object({\r\n  name: JoiExtended.string().required().messages({\r\n    \"string.base\": \"Name must be a string\",\r\n    \"any.required\": \"Name is a required field\",\r\n  }),\r\n  description: JoiExtended.string().required().messages({\r\n    \"string.base\": \"Description must be a string\",\r\n    \"any.required\": \"Description is a required field\",\r\n  }),\r\n  goals: JoiExtended.array()\r\n  .items(\r\n    JoiExtended.string()\r\n      .valid(...FITNESS_GOAL_CODES)\r\n      .messages({\r\n        \"any.only\": `Goals must be one of ${FITNESS_GOAL_CODES.join(\", \")}`,\r\n      })\r\n  )\r\n  .optional()\r\n  .messages({\r\n    \"array.base\": '\"Goals\" must be an array of valid fitness goals',\r\n  }),\r\n  durationInWeeks: JoiExtended.number()\r\n    .integer()\r\n    .positive()\r\n    .required()\r\n    .messages({\r\n      \"number.base\": \"Duration in weeks must be a number\",\r\n      \"number.integer\": \"Duration in weeks must be an integer\",\r\n      \"number.positive\": \"Duration in weeks must be a positive number\",\r\n      \"any.required\": \"Duration in weeks is a required field\",\r\n    }),\r\n  frequencyPerWeek: JoiExtended.number()\r\n    .integer()\r\n    .positive()\r\n    .required()\r\n    .messages({\r\n      \"number.base\": \"Frequency per week must be a number\",\r\n      \"number.integer\": \"Frequency per week must be an integer\",\r\n      \"number.positive\": \"Frequency per week must be a positive number\",\r\n      \"any.required\": \"Frequency per week is a required field\",\r\n    }),\r\n  restDaysPerWeek: JoiExtended.number()\r\n    .integer()\r\n    .positive()\r\n    .required()\r\n    .messages({\r\n      \"number.base\": \"Rest days per week must be a number\",\r\n      \"number.integer\": \"Rest days per week must be an integer\",\r\n      \"number.positive\": \"Rest days per week must be a positive number\",\r\n      \"any.required\": \"Rest days per week is a required field\",\r\n    }),\r\n  intensity: JoiExtended.number().required().messages({\r\n    \"number.base\": \"Intensity must be a number\",\r\n    \"any.required\": \"Intensity is a required field\",\r\n  }),\r\n  exercises: JoiExtended.array()\r\n    .items(\r\n      JoiExtended.object({\r\n        name: JoiExtended.string().required().messages({\r\n          \"string.base\": \"Exercise name must be a string\",\r\n          \"any.required\": \"Exercise name is a required field\",\r\n        }),\r\n        description: JoiExtended.string().required().messages({\r\n          \"string.base\": \"Exercise description must be a string\",\r\n          \"any.required\": \"Exercise description is a required field\",\r\n        }),\r\n        sets: JoiExtended.number().integer().positive().required().messages({\r\n          \"number.base\": \"Sets must be a number\",\r\n          \"number.integer\": \"Sets must be an integer\",\r\n          \"number.positive\": \"Sets must be a positive number\",\r\n          \"any.required\": \"Sets is a required field\",\r\n        }),\r\n        repetitions: JoiExtended.number()\r\n          .integer()\r\n          .positive()\r\n          .required()\r\n          .messages({\r\n            \"number.base\": \"Repetitions must be a number\",\r\n            \"number.integer\": \"Repetitions must be an integer\",\r\n            \"number.positive\": \"Repetitions must be a positive number\",\r\n            \"any.required\": \"Repetitions is a required field\",\r\n          }),\r\n        restBetweenSetsInSeconds: JoiExtended.number()\r\n          .integer()\r\n          .positive()\r\n          .required()\r\n          .messages({\r\n            \"number.base\": \"Rest between sets must be a number\",\r\n            \"number.integer\": \"Rest between sets must be an integer\",\r\n            \"number.positive\": \"Rest between sets must be a positive number\",\r\n            \"any.required\": \"Rest between sets is a required field\",\r\n          }),\r\n        equipmentRequired: JoiExtended.array()\r\n          .items(\r\n            JoiExtended.object({\r\n              name: JoiExtended.string().required().messages({\r\n                \"string.base\": \"Equipment name must be a string\",\r\n                \"any.required\": \"Equipment name is a required field\",\r\n              }),\r\n              description: JoiExtended.string().required().messages({\r\n                \"string.base\": \"Equipment description must be a string\",\r\n                \"any.required\": \"Equipment description is a required field\",\r\n              }),\r\n            })\r\n          )\r\n          .optional(),\r\n      })\r\n    )\r\n    .optional()\r\n    .messages({\r\n      \"any.required\": \"Exercises are required\",\r\n    }),\r\n  nutritionPlan: JoiExtended.object().optional(),\r\n});\r\n\r\nexport const exercisePlanDetailsSchemaJoi = JoiExtended.object({});\r\nexport const addWorkoutToExercisePlanSchemaJoi = JoiExtended.object({});\r\n// export const editUserPlanSchemaJoi = JoiExtended.object({\r\n//   name: JoiExtended.string().optional().messages({\r\n//     \"string.base\": \"Name must be a string\",\r\n//   }),\r\n//   description: JoiExtended.string().optional().messages({\r\n//     \"string.base\": \"Description must be a string\",\r\n//   }),\r\n//   goals: JoiExtended.array()\r\n//     .items(JoiExtended.string().valid(...Object.values(FITNESS_GOALS)))\r\n//     .optional()\r\n//     .messages({\r\n//       \"array.base\": \"Goals must be an array\",\r\n//       \"string.base\": \"Each goal must be a string\",\r\n//     }),\r\n//   durationInWeeks: JoiExtended.number().integer().optional().messages({\r\n//     \"number.base\": \"Duration in weeks must be a number\",\r\n//     \"number.integer\": \"Duration in weeks must be an integer\",\r\n//   }),\r\n//   frequencyPerWeek: JoiExtended.number().integer().optional().messages({\r\n//     \"number.base\": \"Frequency per week must be a number\",\r\n//     \"number.integer\": \"Frequency per week must be an integer\",\r\n//   }),\r\n//   restDaysPerWeek: JoiExtended.number().integer().optional().messages({\r\n//     \"number.base\": \"Rest days per week must be a number\",\r\n//     \"number.integer\": \"Rest days per week must be an integer\",\r\n//   }),\r\n//   intensity: JoiExtended.string()\r\n//     .valid(...Object.values(INTENSITY_LEVELS))\r\n//     .optional()\r\n//     .messages({\r\n//       \"string.base\": \"Intensity must be a string\",\r\n//     }),\r\n//   exercises: JoiExtended.array()\r\n//     .items(\r\n//       JoiExtended.object({\r\n//         name: JoiExtended.string().required().messages({\r\n//           \"string.base\": \"Exercise name must be a string\",\r\n//           \"any.required\": \"Exercise name is a required field\",\r\n//         }),\r\n//         sets: JoiExtended.number().integer().required().messages({\r\n//           \"number.base\": \"Sets must be a number\",\r\n//           \"number.integer\": \"Sets must be an integer\",\r\n//           \"any.required\": \"Sets is a required field\",\r\n//         }),\r\n//         reps: JoiExtended.number().integer().required().messages({\r\n//           \"number.base\": \"Reps must be a number\",\r\n//           \"number.integer\": \"Reps must be an integer\",\r\n//           \"any.required\": \"Reps is a required field\",\r\n//         }),\r\n//         restTime: JoiExtended.number().integer().required().messages({\r\n//           \"number.base\": \"Rest time must be a number\",\r\n//           \"number.integer\": \"Rest time must be an integer\",\r\n//           \"any.required\": \"Rest time is a required field\",\r\n//         }),\r\n//       })\r\n//     )\r\n//     .optional()\r\n//     .messages({\r\n//       \"array.base\": \"Exercises must be an array\",\r\n//     }),\r\n//   nutritionPlan: JoiExtended.object({\r\n//     calories: JoiExtended.number().optional().messages({\r\n//       \"number.base\": \"Calories must be a number\",\r\n//     }),\r\n//     protein: JoiExtended.number().optional().messages({\r\n//       \"number.base\": \"Protein must be a number\",\r\n//     }),\r\n//     carbs: JoiExtended.number().optional().messages({\r\n//       \"number.base\": \"Carbs must be a number\",\r\n//     }),\r\n//     fats: JoiExtended.number().optional().messages({\r\n//       \"number.base\": \"Fats must be a number\",\r\n//     }),\r\n//   })\r\n//     .optional()\r\n//     .messages({\r\n//       \"object.base\": \"Nutrition plan must be an object\",\r\n//     }),\r\n// });\r\n","import { NextFunction, Request, Response } from \"express\";\nimport { RESPONSE_STATUS } from \"../contracts/enum/ResponseRelated.enum\";\nimport { Subscription } from \"../models/dynamic/Subscription.model\";\nimport Paket from \"../models/static/Paket.model\";\n\nexport const checkAndIncreaseAPIHit = (apiIncreaseCount: number) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const { apiKey } = req.query;\n    const user = (req as any).user;\n\n    try {\n      if (typeof apiKey !== 'string') {\n        return res.status(400).json({ error: 'Invalid API key format' });\n      }\n\n      // Check for active subscription\n      const activeSubscription = await Subscription.findOne({\n        userId: user._id,\n        apiKey: apiKey\n      });\n\n      if (!activeSubscription) {\n        return res.status(RESPONSE_STATUS.NOT_FOUND).json({ msg: \"Invalid API Key\" });\n      }\n\n      // Check if the subscription has expired\n      if (!activeSubscription.isActive || activeSubscription.endDate < new Date()) {\n        await activeSubscription.updateOne({\n          isActive: false\n        });\n        return res.status(RESPONSE_STATUS.BAD_REQUEST).json({ msg: \"Your subscription has expired\" });\n      }\n\n      // Check API hit limit\n      const paket = await Paket.findOne({\n        where: {\n          Paket_id: activeSubscription.paketId,\n        },\n      });\n\n      if (!paket || !paket.Paket_Limit) {\n        return res\n          .status(RESPONSE_STATUS.BAD_REQUEST)\n          .json({ msg: \"Paket not found or invalid\" });\n      }\n\n      // If resetAt is less than current time, reset API Hit\n      if (\n        !activeSubscription.resetAt ||\n        activeSubscription.resetAt < new Date()\n      ) {\n        await activeSubscription.updateOne({\n          apiHit: 0,\n          resetAt: new Date(new Date().getTime() + 60 * 1000),\n        });\n      }\n\n      // If API hit equals limit, display error\n      if (activeSubscription.apiHit >= paket.Paket_Limit) {\n        return res\n          .status(RESPONSE_STATUS.BAD_REQUEST)\n          .json({ msg: \"API hit limit reached\" });\n      }\n\n      // Increase API hit and proceed\n      await activeSubscription.updateOne({\n        $inc: { apiHit: apiIncreaseCount },\n      });\n      next();\n    } catch (error) {\n      console.error(\"Error in checkIncreaseAPIHit middleware:\", error);\n      return res\n        .status(RESPONSE_STATUS.INTERNAL_SERVER_ERROR)\n        .json({ msg: \"Internal server error\" });\n    }\n  };\n};\n","import { INewsSource } from \"../contracts/dto/NewsRelated.dto\";\r\n\r\nexport const NewsSource: Array<INewsSource> = [\r\n  {\r\n    url: \"https://www.fitandwell.com/news\",\r\n    name: \"fitandwell\",\r\n  },\r\n];\r\nexport const NewsSourceSearch: Array<INewsSource> = [\r\n  {\r\n    url: \"https://www.fitandwell.com/search?searchTerm=\",\r\n    name: \"fitandwell\",\r\n  },\r\n];\r\n","import { Page } from \"puppeteer\";\r\n\r\n// Utility function to extract articles from the page\r\nexport const extractArticles = async (page: Page) => {\r\n  return await page.evaluate(() => {\r\n    const articles = Array.from(document.querySelectorAll(\".listing__link\"));\r\n    return articles.map((article) => ({\r\n      url: article.getAttribute(\"href\") || null,\r\n      title:\r\n        article.querySelector(\".listing__title\")?.textContent?.trim() || null,\r\n      detail:\r\n        article\r\n          .querySelector(\".listing__text--strapline\")\r\n          ?.textContent?.trim() || null,\r\n      type:\r\n        article.querySelector(\".listing__label\")?.textContent?.trim() || null,\r\n      writer:\r\n        article.querySelector(\".listing__text--byline\")?.textContent?.trim() ||\r\n        null,\r\n      publishedDate:\r\n        new Date(\r\n          article\r\n            .querySelector(\".date.byline__time\")\r\n            ?.getAttribute(\"datetime\")\r\n            ?.toString() ?? \"\"\r\n        ).toUTCString() || null,\r\n    }));\r\n  });\r\n};\r\n","import { Request, Response } from \"express\";\r\nimport puppeteer from \"puppeteer\";\r\nimport { NewsSource, NewsSourceSearch } from \"../config/NewsSources\";\r\nimport { extractArticles } from \"../utils/NewsUtils\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { INewsSource } from \"../contracts/dto/NewsRelated.dto\";\r\n\r\n// Utility function to launch a new browser instance\r\nconst launchBrowser = async () => {\r\n  return await puppeteer.launch();\r\n};\r\n\r\n// // Get all news articles from the sources\r\n// export const getAllNews = async (req: Request, res: Response) => {\r\n//   const sources = NewsSource;\r\n//   const allArticles: any[] = [];\r\n\r\n//   try {\r\n//     const browser = await launchBrowser();\r\n//     console.log(\"sources\", sources);\r\n\r\n//     for (const source of sources) {\r\n//       if (source.name === \"fitandwell\") {\r\n//         try {\r\n//           const page = await browser.newPage();\r\n//           console.log(`Extracting articles from ${source.url}`);\r\n//           await page.goto(source.url, {\r\n//             waitUntil: \"domcontentloaded\",\r\n//             timeout: 300000,\r\n//           });\r\n//           await page.waitForSelector(\".listing__link\", { timeout: 300000 });\r\n//           const articles = await extractArticles(page);\r\n//           allArticles.push(...articles);\r\n//           await page.close();\r\n//         } catch (error) {\r\n//           console.error(\r\n//             `Failed to extract articles from ${source.url}:`,\r\n//             error\r\n//           );\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     await browser.close();\r\n//   } catch (error) {\r\n//     console.error(\"An error occurred while extracting news:\", error);\r\n//     return res.status(500).send(\"An error occurred while extracting news.\");\r\n//   }\r\n\r\n//   return res.json(allArticles);\r\n// };\r\n\r\nexport const getFilteredNews = async (req: Request, res: Response) => {\r\n  const isQueryEmpty = Object.keys(req.query).length === 0;\r\n  if (isQueryEmpty) {\r\n    const sources = NewsSource;\r\n    const allArticles: any[] = [];\r\n\r\n    try {\r\n      const browser = await launchBrowser();\r\n      console.log(\"sources\", sources);\r\n\r\n      for (const source of sources) {\r\n        if (source.name === \"fitandwell\") {\r\n          try {\r\n            const page = await browser.newPage();\r\n            console.log(`Extracting articles from ${source.url}`);\r\n            await page.goto(source.url, {\r\n              waitUntil: \"domcontentloaded\",\r\n              timeout: 300000,\r\n            });\r\n            await page.waitForSelector(\".listing__link\", { timeout: 300000 });\r\n            const articles = await extractArticles(page);\r\n            allArticles.push(...articles);\r\n            await page.close();\r\n          } catch (error) {\r\n            console.error(\r\n              `Failed to extract articles from ${source.url}:`,\r\n              error\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      await browser.close();\r\n    } catch (error) {\r\n      console.error(\"An error occurred while extracting news:\", error);\r\n      return res.status(500).send(\"An error occurred while extracting news.\");\r\n    }\r\n\r\n    return res.json(allArticles);\r\n  }\r\n\r\n  if (!isQueryEmpty) {\r\n    const sources = NewsSourceSearch;\r\n    const allArticles: any[] = [];\r\n    try {\r\n      const browser = await launchBrowser();\r\n\r\n      for (const source of sources) {\r\n        if (source.name === \"fitandwell\") {\r\n          const sourceFilter = source.url + req.query.title;\r\n          try {\r\n            const page = await browser.newPage();\r\n            await page.goto(sourceFilter, {\r\n              waitUntil: \"domcontentloaded\",\r\n              timeout: 300000,\r\n            });\r\n            await page.waitForSelector(\".listing__link\", { timeout: 300000 });\r\n            const articles = await page.evaluate(() => {\r\n              const links = Array.from(\r\n                document.querySelectorAll(\".listing__link\")\r\n              );\r\n              return links.map((link) => {\r\n                const title = link.querySelector(\".listing__title\")?.innerHTML;\r\n                const detail = link.querySelector(\r\n                  \".listing__text--strapline\"\r\n                )?.innerHTML;\r\n                const type = link.querySelector(\".listing__label\")?.innerHTML;\r\n                const writer = link\r\n                  .querySelector(\".listing__text--byline\")\r\n                  ?.innerHTML.split(\"By \")[1];\r\n                const publishedDate = link\r\n                  .querySelector(\".date\")\r\n                  ?.getAttribute(\"datetime\");\r\n                const url = link.getAttribute(\"href\");\r\n                return { title, detail, type, writer, publishedDate, url };\r\n              });\r\n            });\r\n            allArticles.push(...articles);\r\n            await page.close();\r\n          } catch (error) {\r\n            console.error(\r\n              `Failed to extract articles from ${sourceFilter}:`,\r\n              error\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      if (allArticles.length === 0) {\r\n        console.log(\"No articles found.\");\r\n        await browser.close();\r\n        return res.status(404).send(\"No articles found.\");\r\n      }\r\n\r\n      await browser.close();\r\n      return res.json(allArticles);\r\n    } catch (error) {\r\n      console.error(\"An error occurred while setting up the browser:\", error);\r\n      return res\r\n        .status(500)\r\n        .send(\"An error occurred while setting up the browser.\");\r\n    }\r\n  }\r\n};\r\n// TODO : MAKE ENDPOINT FOR FILTERING NEWS https://www.fitandwell.com/search?searchTerm=hello\r\n// // Get specific news article by title\r\n// export const getSpecificNews = async (req: Request, res: Response) => {\r\n//   const { title } = req.params;\r\n//   let articleUrl = \"\";\r\n\r\n//   try {\r\n//     const browser = await launchBrowser();\r\n//     const page = await browser.newPage();\r\n\r\n//     for (const source of NewsSource) {\r\n//       if (source.name === \"fitandwell\") {\r\n//         try {\r\n//           console.log(`Extracting articles from ${source.url}`);\r\n//           await page.goto(source.url, {\r\n//             waitUntil: \"networkidle2\",\r\n//             timeout: 300000,\r\n//           });\r\n//           await page.waitForSelector(\".listing__link\", { timeout: 300000 });\r\n//           const articles = await extractArticles(page);\r\n\r\n//           const article = articles.find((a) => a.title?.includes(title));\r\n//           if (article && article.url) {\r\n//             articleUrl = article.url;\r\n//             break;\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\r\n//             `Failed to extract articles from ${source.url}:`,\r\n//             error\r\n//           );\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     if (!articleUrl) {\r\n//       await browser.close();\r\n//       return res.status(404).send(\"Article not found.\");\r\n//     }\r\n\r\n//     await page.goto(articleUrl, { waitUntil: \"networkidle2\", timeout: 300000 });\r\n//     await page.waitForSelector(\"title\", { timeout: 300000 });\r\n\r\n//     // const data = await page.evaluate(() => {\r\n//     //   const getTextContent = (selector: string) => {\r\n//     //     const element = document.querySelector(selector);\r\n//     //     return element ? element.textContent?.trim() : null;\r\n//     //   };\r\n\r\n//     //   const getContent = () => {\r\n//     //     const element = document.querySelector(\"#article-body\");\r\n//     //     const text = element?.textContent?.trim() || \"\";\r\n//     //     // const contentArray = text.split(\".\").map((t) => t.replace(/\\n/g, \"\"));\r\n//     //     function removeHtmlCssJs(str: string) {\r\n//     //       // Remove HTML tags\r\n//     //       str = str.replace(/<[^>]*>/g, \"\");\r\n\r\n//     //       // Remove CSS styles\r\n//     //       str = str.replace(/<style[^>]*>.*<\\/style>/gm, \"\");\r\n\r\n//     //       // Remove JavaScript\r\n//     //       str = str.replace(/<script[^>]*>.*<\\/script>/gm, \"\");\r\n\r\n//     //       return str;\r\n//     //     }\r\n//     //     return removeHtmlCssJs(text);\r\n//     //   };\r\n\r\n//     //   const getAttributeContent = (selector: string, attribute: string) => {\r\n//     //     const element = document.querySelector(selector);\r\n//     //     return element ? element.getAttribute(attribute) : null;\r\n//     //   };\r\n\r\n//     //   const getAuthor = () => {\r\n//     //     const scriptElement = document.querySelector(\r\n//     //       'script[type=\"application/ld+json\"]'\r\n//     //     );\r\n//     //     if (scriptElement) {\r\n//     //       const json = JSON.parse(scriptElement.textContent || \"{}\");\r\n//     //       return json.author ? json.author.name : null;\r\n//     //     }\r\n//     //     return null;\r\n//     //   };\r\n\r\n//     //   return {\r\n//     //     title: getTextContent(\"title\"),\r\n//     //     description: getTextContent(\".header__strapline\"),\r\n//     //     content: getContent(),\r\n//     //     writer: getAuthor(),\r\n//     //     publishedDate: getAttributeContent('meta[name=\"pub_date\"]', \"content\"),\r\n//     //     nextRecommendation: getTextContent('[aria-label=\"Next article\"]'),\r\n//     //     previousRecommendation: getTextContent(\r\n//     //       '[aria-label=\"Previous article\"]'\r\n//     //     ),\r\n//     //   };\r\n//     // });\r\n\r\n//     await browser.close();\r\n//     res.json(data);\r\n//   } catch (error) {\r\n//     console.error(\r\n//       \"An error occurred while extracting the specific news:\",\r\n//       error\r\n//     );\r\n//     return res\r\n//       .status(500)\r\n//       .send(\"An error occurred while extracting the specific news.\");\r\n//   }\r\n// };\r\nexport const getSpecificNews = async (req: Request, res: Response) => {\r\n  // TODO : MAKE THIS ENDPOINT FOR also search the seqch query https://www.fitandwell.com/search?searchTerm=hello\r\n  const { title } = req.params;\r\n  let articleUrl = \"\";\r\n  let selectedArticleTitle = \"\";\r\n  let source: any;\r\n  try {\r\n    const browser = await launchBrowser();\r\n    try {\r\n      const page = await browser.newPage();\r\n\r\n      for (let i = 0; i < NewsSourceSearch.length; i++) {\r\n        source = NewsSourceSearch[i];\r\n        if (source.name === \"fitandwell\") {\r\n          const sourceFilter = source.url + title;\r\n          try {\r\n            console.log(`Extracting articles from ${sourceFilter}`);\r\n            await page.goto(sourceFilter, {\r\n              waitUntil: \"domcontentloaded\",\r\n              timeout: 300000,\r\n            });\r\n            await page.waitForSelector(\".listing__link\", { timeout: 300000 });\r\n\r\n            const articles = await extractArticles(page);\r\n            const article = articles.find((a) => a.title?.includes(title));\r\n            if (article && article.url) {\r\n              selectedArticleTitle = article.title || \"unknown\";\r\n              articleUrl = article.url;\r\n              break;\r\n            }\r\n          } catch (error) {\r\n            console.error(\r\n              `Failed to extract articles from ${sourceFilter}:`,\r\n              error\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!articleUrl) {\r\n        await browser.close();\r\n        return res.status(404).send(\"Article not found.\");\r\n      }\r\n\r\n      await page.goto(articleUrl, {\r\n        waitUntil: \"domcontentloaded\",\r\n        timeout: 300000,\r\n      });\r\n      await page.emulateMediaType(\"screen\");\r\n\r\n      const htmlContent = await page.content();\r\n      await browser.close();\r\n\r\n      const safeTitle = selectedArticleTitle.replace(/[<>:\"\\/\\\\|?*]+/g, \"-\");\r\n      const filePath = path.resolve(\r\n        __dirname,\r\n        `../../articles/${source.name}/article_${safeTitle}.html`\r\n      );\r\n\r\n      // Ensure the directory exists\r\n      fs.mkdirSync(path.dirname(filePath), { recursive: true });\r\n\r\n      fs.writeFileSync(filePath, htmlContent);\r\n      res.sendFile(filePath);\r\n    } catch (error) {\r\n      console.error(\r\n        \"An error occurred while extracting the specific news:\",\r\n        error\r\n      );\r\n\r\n      // Ensure the browser is closed in case of error\r\n      try {\r\n        await browser.close();\r\n      } catch (closeError) {\r\n        console.error(\"Error closing the browser:\", closeError);\r\n      }\r\n\r\n      return res\r\n        .status(500)\r\n        .send(\"An error occurred while extracting the specific news.\");\r\n    }\r\n  } catch (error) {}\r\n};\r\n","import {\r\n  Client,\r\n  PlacesNearbyRanking,\r\n} from \"@googlemaps/google-maps-services-js\";\r\nimport { ENV } from \"../config/environment\";\r\n\r\nclass GoogleMapsService {\r\n  private client: Client;\r\n  private apiKey: string;\r\n\r\n  constructor(apiKey: string) {\r\n    this.client = new Client({});\r\n    this.apiKey = apiKey;\r\n    console.log(\"API Key:\", this.apiKey); // Check the API key\r\n  }\r\n\r\n  public async getNearbyGyms(lat: number, lng: number) {\r\n    console.log(\"getNearbyGyms called with:\", lat, lng); // Check the method call\r\n    return await this.client\r\n      .placesNearby({\r\n        params: {\r\n          location: { lat: lat, lng: lng },\r\n          type: \"gym\",\r\n          key: this.apiKey,\r\n          rankby: PlacesNearbyRanking.distance,\r\n        },\r\n        timeout: 5000, // Increase the timeout\r\n      })\r\n      .then((r) => {\r\n        // console.log(r.data.results.slice(0, 10));\r\n        return r.data.results.slice(0, 10);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"Error:\", e.response.data); // Check for errors\r\n        return e.response.data.error_message;\r\n      });\r\n  }\r\n}\r\n\r\nexport const GoogleMaps = new GoogleMapsService(ENV.API_GOOGLE_PLACES_API_KEY);\r\n","import { Request, Response } from \"express\";\r\nimport { GoogleMaps } from \"../services/GoogleMapsService\";\r\n\r\nexport const getNearestGyms = async (req: Request, res: Response) => {\r\n  const { lat, lng } = req.query;\r\n\r\n  const latitute = parseFloat(lat as string);\r\n  const longitude = parseFloat(lng as string);\r\n\r\n  const gyms = await GoogleMaps.getNearbyGyms(latitute, longitude);\r\n\r\n  return res.status(200).json({ data: gyms });\r\n};\r\n","import { JoiExtended } from \".\";\r\n\r\nexport const getGymsSchema = JoiExtended.object({\r\n  lat: JoiExtended.number().required().messages({\r\n    \"any.required\": \"Latitude is a required field.\",\r\n    \"number.base\": \"Latitude must be a number.\",\r\n  }),\r\n  lng: JoiExtended.number().required().messages({\r\n    \"any.required\": \"Longitude is a required field.\",\r\n    \"number.base\": \"Longitude must be a number.\",\r\n  }),\r\n});\r\n","import multer from \"multer\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nconst uploadDir = \"src/storage/images/profilePictures\";\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    if (!fs.existsSync(uploadDir)) {\r\n      fs.mkdirSync(uploadDir, { recursive: true });\r\n    }\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: function (req, file, cb) {   \r\n    const user = (req as any).user; \r\n    const fileExtension = path.extname(file.originalname).toLowerCase();\r\n    cb(null, `${user._id}${fileExtension}`);\r\n  },\r\n});\r\n\r\nconst upload = multer({\r\n  storage: storage,\r\n  limits: { fileSize: 1024 * 1024 * 5 },\r\n  fileFilter: (req, file, cb) => {\r\n    const filetypes = /jpeg|jpg|png|gif/;\r\n    const fileExtension = path.extname(file.originalname).toLowerCase();\r\n\r\n    const checkExtName = filetypes.test(fileExtension);\r\n    const checkMimeType = filetypes.test(file.mimetype);\r\n\r\n    if (checkExtName && checkMimeType) {\r\n        cb(null, true);\r\n    } else {\r\n        cb(new Error(\"Wrong file extension\"));\r\n    }\r\n}\r\n});\r\n\r\nexport default upload;\r\n","import { Router } from \"express\";\r\nimport {\r\n  editProfile,\r\n  generateNewAccessToken,\r\n  getAllUser,\r\n  getDashboard,\r\n  loginUser,\r\n  newRefreshToken,\r\n  registerUser,\r\n  verifyEmail,\r\n  getApiKey,\r\n  resetApiKey,\r\n  subscribePacket,\r\n  renewSubscription,\r\n  topup,\r\n  adminDashboard,\r\n  getUserProfile,\r\n  deleteUserProfile,\r\n  getUserPacket,\r\n  addUserPacket,\r\n  deleteUserPacket,\r\n  addExercise,\r\n  topupFromAdmin,\r\n  getProfPic,\r\n  getUserProfilePicture,\r\n} from \"../controller/UserController\";\r\nimport {\r\n  validateAccessToken,\r\n  validateAdmin,\r\n  validateNotSignIn,\r\n  validateIsNotAdmin,\r\n} from \"../middleware/AuthMiddleware\";\r\nimport {\r\n  validateBody,\r\n  validateCookie,\r\n  validateParams,\r\n  validateQuery,\r\n} from \"../middleware/ValidateMiddleware\";\r\nimport {\r\n  editProfileSchemaJoi,\r\n  loginSchemaJoi,\r\n  registerSchemaJoi,\r\n  validationTokenSchemaJoi,\r\n} from \"../validators/User.validate\";\r\nimport { getAllPricingPackages } from \"../controller/PricingController\";\r\nimport {\r\n  getExercise,\r\n  getAllGoals,\r\n  getGoalByTitle,\r\n} from \"../controller/ExerciseController\";\r\nimport {\r\n  completeExercisePlan,\r\n  createExercisePlan,\r\n  editExercisePlan,\r\n  exercisePlanDetails,\r\n  addWorkoutToExercisePlan,\r\n  startExercisePlan,\r\n  pictureExercisePlanByUser,\r\n  trackerExercisePlanByUser,\r\n  getAllExercisePlanByUser,\r\n  getExercisePlanDetailByUser,\r\n  cancelExercisePlanByUser,\r\n} from \"../controller/UserPlanController\";\r\nimport { createUserPlanSchemaJoi } from \"../validators/Plans.validate\";\r\nimport {\r\n  checkAndIncreaseAPIHit\r\n} from \"../middleware/BusinessMiddleware\";\r\nimport { getFilteredNews, getSpecificNews } from \"../controller/NewsController\";\r\nimport { getNearestGyms } from \"../controller/GymsController\";\r\nimport { getGymsSchema } from \"../validators/Maps.validate\";\r\nimport upload from \"../middleware/Upload\";\r\n\r\nconst router = Router();\r\n\r\n// Authentication Routes\r\nrouter.post(\r\n  \"/auth/register\",\r\n  validateBody(registerSchemaJoi),\r\n  validateNotSignIn,\r\n  registerUser\r\n);\r\nrouter.post(\r\n  \"/auth/login\",\r\n  validateBody(loginSchemaJoi),\r\n  validateNotSignIn,\r\n  loginUser\r\n);\r\nrouter.post(\r\n  \"/auth/token\",\r\n  validateCookie(validationTokenSchemaJoi),\r\n  generateNewAccessToken\r\n);\r\nrouter.post(\r\n  \"/auth/refresh_token\",\r\n  validateCookie(validationTokenSchemaJoi),\r\n  newRefreshToken\r\n);\r\nrouter.get(\"/auth/verify/:emailVerificationToken\", verifyEmail);\r\n\r\n// Admin Routes\r\nrouter.get(\"/admin/users\", [validateAccessToken, validateAdmin], getAllUser);\r\nrouter.get(\r\n  \"/admin/dashboard\",\r\n  [validateAccessToken, validateAdmin],\r\n  adminDashboard\r\n);\r\nrouter.get(\r\n  \"/admin/user/profile/:userID\",\r\n  [validateAccessToken, validateAdmin],\r\n  getUserProfile\r\n);\r\nrouter.delete(\r\n  \"/admin/user/profile/:userID\",\r\n  [validateAccessToken, validateAdmin],\r\n  deleteUserProfile\r\n);\r\nrouter.get(\r\n  \"/admin/user/profile-picture/:userID\",\r\n  [validateAccessToken, validateAdmin],\r\n  getUserProfilePicture\r\n);\r\nrouter.get(\r\n  \"/admin/user/packet/:userID\",\r\n  [validateAccessToken, validateAdmin],\r\n  getUserPacket\r\n);\r\nrouter.post(\r\n  \"/admin/user/packet/:userID\",\r\n  [validateAccessToken, validateAdmin],\r\n  addUserPacket\r\n);\r\nrouter.delete(\r\n  \"/admin/user/packet/:userID\",\r\n  [validateAccessToken, validateAdmin],\r\n  deleteUserPacket\r\n);\r\nrouter.get(\r\n  \"/admin/exercise\",\r\n  [validateAccessToken, validateAdmin],\r\n  addExercise\r\n);\r\nrouter.put(\r\n  \"/admin/user/topup/:userID?\",\r\n  [validateAccessToken, validateAdmin],\r\n  topupFromAdmin\r\n);\r\n\r\n// User Routes\r\nrouter.put(\"/users/topup\", [validateAccessToken, validateIsNotAdmin], topup);\r\nrouter.get(\r\n  \"/users/dashboard\",\r\n  [validateAccessToken, validateIsNotAdmin],\r\n  getDashboard\r\n);\r\nrouter.get(\r\n  \"/users/profile-picture\",\r\n  [validateAccessToken, validateIsNotAdmin],\r\n  getProfPic\r\n);\r\nrouter.put(\r\n  \"/users/profile\",\r\n  [\r\n    validateBody(editProfileSchemaJoi), // Check if this works or not (Hansen)\r\n    validateAccessToken,\r\n    validateIsNotAdmin,\r\n    upload.single(\"profilePicture\"),\r\n  ],\r\n  editProfile\r\n);\r\nrouter.get(\r\n  \"/users/apikey\",\r\n  [validateAccessToken, validateIsNotAdmin],\r\n  getApiKey\r\n);\r\nrouter.put(\r\n  \"/users/apikey/reset\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  resetApiKey\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.post(\r\n  \"/users/subscribe\",\r\n  [validateAccessToken, validateIsNotAdmin],\r\n  subscribePacket\r\n);\r\nrouter.put(\r\n  \"/users/renew\",\r\n  [validateAccessToken, validateIsNotAdmin],\r\n  renewSubscription\r\n);\r\nrouter.post(\r\n  \"/users/plan\",\r\n  [\r\n    validateBody(createUserPlanSchemaJoi),\r\n    validateAccessToken, // TODO : Check with hansen mungkin ini error (Should be fine, Hansen)\r\n    validateIsNotAdmin,\r\n    checkAndIncreaseAPIHit(1),\r\n  ],\r\n  createExercisePlan\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.get(\r\n  \"/users/plan\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  getAllExercisePlanByUser\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.get(\r\n  \"/users/plan/:id\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  getExercisePlanDetailByUser\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\n\r\n// Exercise Plan Routes\r\nrouter.put(\r\n  \"/users/plan/edit/:id\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  editExercisePlan\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.post(\r\n  \"/users/plan/start/:id\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  startExercisePlan\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.put(\r\n  \"/users/plan/:id/workout/\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  addWorkoutToExercisePlan\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.get(\r\n  \"/users/plan/:id/workout/\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  exercisePlanDetails\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.post(\r\n  \"/users/plan/complete/:id\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  completeExercisePlan\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.put(\r\n  \"/users/plan/cancel/:id\",\r\n  [validateAccessToken, validateIsNotAdmin, checkAndIncreaseAPIHit(1)],\r\n  cancelExercisePlanByUser\r\n);\r\n\r\n// Pricing Routes\r\nrouter.get(\"/pricing\", getAllPricingPackages);\r\n\r\n// Exercise Routes\r\nrouter.get(\"/exercise\", [validateAccessToken], getExercise);\r\nrouter.get(\"/exercise/goals\", [validateAccessToken], getAllGoals);\r\nrouter.get(\"/exercise/goals/:title\", [validateAccessToken], getGoalByTitle);\r\n\r\n// News Routes\r\n// router.get(\"/news\", getAllNews);\r\nrouter.get(\r\n  \"/news\",\r\n  [validateAccessToken, checkAndIncreaseAPIHit(1)],\r\n  getFilteredNews\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\nrouter.get(\r\n  \"/news/:title\",\r\n  [validateAccessToken, checkAndIncreaseAPIHit(1)],\r\n  getSpecificNews\r\n); // TODO : bikin ini pake ApiKey (Hansen)\r\n\r\n// Maps Routes\r\nrouter.get(\r\n  \"/gyms/nearest\",\r\n  validateAccessToken,\r\n  validateQuery(getGymsSchema),\r\n  getNearestGyms\r\n); // TODO : bikin ini pake ApiKey (Hansen) sama nambah ApiHit\r\n\r\nexport default router;\r\n","export enum ROUTES {\r\n    ROOT = '/',\r\n    API_DOCS = '/api-docs',\r\n    API_V1 = '/api/v1',\r\n    AUTH_REGISTER = '/auth/register',\r\n    AUTH_LOGIN = '/auth/login',\r\n    AUTH_TOKEN = '/auth/token',\r\n    AUTH_REFRESH_TOKEN = '/auth/refresh_token',\r\n    USERS_ID = '/users/:id',\r\n    DYNAMIC_ROUTES = '/dynamic/*',\r\n    ADD_ROUTES = \"/routes/:routes\"\r\n}","export default {\r\n  get: {\r\n    tags: [\"root\"],\r\n    summary: \"Check API Service status\",\r\n    description: \"This endpoint checks if the API Service is running.\",\r\n    operationId: \"checkStatus\",\r\n    responses: {\r\n      \"200\": {\r\n        description: \"API Service is running\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"auth\"],\r\n    summary: \"Register a new user\",\r\n    description: \"This endpoint registers a new user.\",\r\n    operationId: \"registerUser\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              username: { type: \"string\" },\r\n              email: { type: \"string\", format: \"email\" },\r\n              password: { type: \"string\" },\r\n              fullName: { type: \"string\" },\r\n              phone: { type: \"string\", pattern: \"^[0-9]{10,15}$\" },\r\n            },\r\n            required: [\"username\", \"email\", \"password\", \"fullName\", \"phone\"],\r\n          },\r\n        },\r\n      },\r\n      required: true,\r\n    },\r\n    responses: {\r\n      \"201\": {\r\n        description:\r\n          \"Register Successful, please verify your email within 24 hours!\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n                user: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Bad Request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"auth\"],\r\n    summary: \"Login a user\",\r\n    description: \"This endpoint logs in a user.\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    operationId: \"loginUser\",\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              username: { type: \"string\", default: \"string\" },\r\n              email: { type: \"string\", format: \"email\", default: \"\" },\r\n              password: { type: \"string\" },\r\n              rememberMe: { type: \"boolean\" },\r\n            },\r\n            anyOf: [{ required: [\"username\"] }, { required: [\"email\"] }],\r\n            required: [\"password\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Logged in successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n                token: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Bad Request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"auth\"],\r\n    summary: \"Generate a new access token using a refresh token\",\r\n    description:\r\n      \"This endpoint generates a new access token by validating the provided refresh token.\",\r\n    operationId: \"generateNewAccessToken\",\r\n    requestBody: {\r\n      description: \"Refresh Token required to generate a new access token\",\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              refreshToken: {\r\n                type: \"string\",\r\n                description: \"Valid refresh token from the user\",\r\n              },\r\n            },\r\n            required: [\"refreshToken\"],\r\n          },\r\n        },\r\n      },\r\n      required: true,\r\n    },\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Access token created successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                accessToken: {\r\n                  type: \"string\",\r\n                  description: \"Newly created access token for the user\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"403\": {\r\n        description: \"Invalid refresh token\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"auth\"],\r\n    summary: \"Generate a new refresh token\",\r\n    description:\r\n      \"This endpoint generates a new refresh token for authenticated users.\",\r\n    operationId: \"newRefreshToken\",\r\n    requestBody: {\r\n      description: \"Refresh Token required to generate a new refresh token\",\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              refreshToken: {\r\n                type: \"string\",\r\n                description: \"Valid refresh token from the user\",\r\n              },\r\n            },\r\n            required: [\"refreshToken\"],\r\n          },\r\n        },\r\n      },\r\n      required: true,\r\n    },\r\n    responses: {\r\n      \"200\": {\r\n        description: \"New refresh token created successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                refreshToken: {\r\n                  type: \"string\",\r\n                  description: \"Newly created refresh token for the user\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"403\": {\r\n        description: \"Invalid refresh token\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    security: [\r\n      {\r\n        cookieAuth: [],\r\n      },\r\n    ],\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"auth\"],\r\n    summary: \"Verify user's email\",\r\n    description:\r\n      \"This endpoint verifies a user's email using the email verification token.\",\r\n    operationId: \"verifyEmail\",\r\n    parameters: [\r\n      {\r\n        name: \"emailVerificationToken\",\r\n        in: \"path\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n        description: \"The email verification token provided to the user.\",\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Email verified successfully.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"403\": {\r\n        description: \"Invalid or expired email verification token.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { ROLE } from \"../../../contracts/enum/UserRelated.enum\";\r\n\r\nexport default {\r\n    get: {\r\n      tags: [\"admin\"],\r\n      summary: \"Allow admin to get all users\",\r\n      description: \"This endpoint returns every user's data with optional filters\",\r\n      security: [\r\n        {\r\n          bearerAuth: [],\r\n        },\r\n      ],\r\n      operationId: \"getAllUser\",\r\n      parameters: [\r\n        {\r\n          name: \"username\",\r\n          in: \"query\",\r\n          description: \"Filter by username (case-sensitive)\",\r\n          required: false,\r\n          schema: {\r\n            type: \"string\",\r\n          },\r\n        },\r\n        {\r\n          name: \"email\",\r\n          in: \"query\",\r\n          description: \"Filter by email (case-sensitive)\",\r\n          required: false,\r\n          schema: {\r\n            type: \"string\",\r\n          },\r\n        },\r\n        {\r\n          name: \"fullName\",\r\n          in: \"query\",\r\n          description: \"Filter by full name (case-sensitive)\",\r\n          required: false,\r\n          schema: {\r\n            type: \"string\",\r\n          },\r\n        },\r\n        {\r\n          name: \"role\",\r\n          in: \"query\",\r\n          description: \"Filter by role\",\r\n          required: false,\r\n          schema: {\r\n            type: \"string\",\r\n            enum: Object.values(ROLE),\r\n          },\r\n        },\r\n      ],\r\n      responses: {\r\n        \"200\": {\r\n          description: \"Users returned successfully\",\r\n          content: {\r\n            \"application/json\": {\r\n              schema: {\r\n                type: \"object\",\r\n                properties: {\r\n                  users: {\r\n                    type: \"array\",\r\n                    items: {\r\n                      type: \"object\",\r\n                      properties: {\r\n                        role: { type: \"string\" },\r\n                        _id: { type: \"string\" },\r\n                        username: { type: \"string\" },\r\n                        email: { type: \"string\" },\r\n                        phone: { type: \"string\" },\r\n                        isEmailVerified: { type: \"boolean\" },\r\n                        fullName: { type: \"string\" },\r\n                        balance: { type: \"number\" },\r\n                      },\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        \"401\": {\r\n          description: \"Unauthorized\",\r\n          content: {\r\n            \"application/json\": {\r\n              schema: {\r\n                type: \"object\",\r\n                properties: {\r\n                  msg: { type: \"string\" },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        \"500\": {\r\n          description: \"Internal server error\",\r\n          content: {\r\n            \"application/json\": {\r\n              schema: {\r\n                type: \"object\",\r\n                properties: {\r\n                  msg: { type: \"string\" },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n  ","export default {\n    put: {\n      tags: [\"users\"],\n      summary: \"Topup the user's balance\",\n      description: \"This endpoint increases the user's balance.\",\n      operationId: \"topup\",\n      security: [\n        {\n          bearerAuth: [],\n        },\n      ],\n      requestBody: {\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                amount: { type: \"number\" },\n              },\n              required: [\"amount\"],\n            },\n          },\n        },\n        required: true,\n      },\n      responses: {\n        \"200\": {\n          description: \"Topup successful\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  message: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n        \"400\": {\n          description: \"Invalid topup amount\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  message: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n        \"401\": {\n          description: \"Unauthorized\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  message: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n        \"500\": {\n          description: \"Internal server error\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  error: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  };\n  ","export default {\r\n  get: {\r\n    tags: [\"users\"],\r\n    summary: \"Get user dashboard\",\r\n    description: \"This endpoint returns the user's dashboard.\",\r\n    operationId: \"getDashboard\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User dashboard retrieved successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                user: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  put: {\r\n    tags: [\"users\"],\r\n    summary: \"Edit user profile\",\r\n    description: \"This endpoint edits the user's profile.\",\r\n    operationId: \"editProfile\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    requestBody: {\r\n      content: {\r\n        \"multipart/form-data\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              old_password: { type: \"string\" },\r\n              new_password: { type: \"string\" },\r\n              confirm_password: { type: \"string\" },\r\n              fullName: { type: \"string\" },\r\n              phone: { type: \"string\", pattern: \"^[0-9]{10,15}$\" },\r\n              age: { type: \"integer\" },\r\n              gender: { type: \"string\" },\r\n              height: { type: \"number\" },\r\n              weight: { type: \"number\" },\r\n              healthInformation: { type: \"string\" },\r\n              profilePicture: {\r\n                type: \"string\",\r\n                format: \"binary\",\r\n                description: \"Profile picture file\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User profile updated successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                user: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Bad request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"pricing\"],\r\n    summary: \"Get all pricing packages\",\r\n    description: \"Retrieves all pricing packages available.\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Successful response with pricing packages data\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"array\",\r\n              items: {\r\n                type: \"object\",\r\n                properties: {\r\n                  Paket_id: {\r\n                    type: \"string\",\r\n                    example: \"PAK001\",\r\n                  },\r\n                  Paket_name: {\r\n                    type: \"string\",\r\n                    example: \"Starter\",\r\n                  },\r\n                  Paket_description: {\r\n                    type: \"string\",\r\n                    example: \"Free package with limited rate\",\r\n                  },\r\n                  Paket_Limit: {\r\n                    type: \"integer\",\r\n                    example: 15,\r\n                  },\r\n                  Paket_price: {\r\n                    type: \"integer\",\r\n                    example: 0,\r\n                  },\r\n                  Paket_price_currency: {\r\n                    type: \"string\",\r\n                    example: \"IDR\",\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    summary: \"Get API key for a user\",\r\n    description: \"Retrieves the API key associated with a user.\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    tags: [\"users\"],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Successful response with API key data\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                apiKey: {\r\n                  type: \"string\",\r\n                  description: \"API key associated with the user\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Not Found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              $ref: \"#/components/schemas/NotFoundResponse\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              $ref: \"#/components/schemas/UnauthorizedResponse\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal Server Error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              $ref: \"#/components/schemas/ErrorResponse\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  put: {\r\n    summary: \"Reset API key for a user\",\r\n    description: \"Resets the API key associated with a user.\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    tags: [\"users\"],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Successful response with new API key data\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                apiKey: {\r\n                  type: \"string\",\r\n                  description: \"New API key associated with the user\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Not Found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              $ref: \"#/components/schemas/NotFoundResponse\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              $ref: \"#/components/schemas/UnauthorizedResponse\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal Server Error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              $ref: \"#/components/schemas/ErrorResponse\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"users\"],\r\n    summary: \"Subscribe a user to a packet\",\r\n    description: \"This endpoint subscribes a user to a packet.\",\r\n    operationId: \"subscribePacket\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"array\",\r\n            items: {\r\n              type: \"object\",\r\n              properties: {\r\n                paketId: { type: \"string\" },\r\n                month: { type: \"number\" },\r\n              },\r\n              required: [\"paketId\", \"month\"],\r\n            },\r\n          },\r\n          example: [\r\n            {\r\n              paketId: \"PAK002\",\r\n              month: 1\r\n            },\r\n            {\r\n              paketId: \"PAK003\",\r\n              month: 2\r\n            }\r\n          ],\r\n\r\n        },\r\n      },\r\n      required: true,\r\n    },\r\n    responses: {\r\n      \"201\": {\r\n        description: \"Subscriptions created successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n                transaction: {\r\n                  type: \"object\",\r\n                  properties: {\r\n                    transactionHeaderType: { type: \"string\" },\r\n                    date: { type: \"string\", format: \"date-time\" },\r\n                    total: { type: \"number\" },\r\n                    userId: { type: \"string\" },\r\n                    isAdmin: { type: \"boolean\" },\r\n                  },\r\n                },\r\n                subscriptions: {\r\n                  type: \"array\",\r\n                  items: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                      transactionDetailType: { type: \"string\" },\r\n                      paket_id: { type: \"string\" },\r\n                      subscription_id: { type: \"string\" },\r\n                      month: { type: \"number\" },\r\n                      price: { type: \"number\" },\r\n                      subtotal: { type: \"number\" },\r\n                      message: { type: \"string\" },\r\n                    },\r\n                  },\r\n                },\r\n                remainingBalance: { type: \"number\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Invalid number of months\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Packet not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\n  put: {\n    tags: [\"users\"],\n    summary: \"Renew a subscription\",\n    description: \"This endpoint renews a user's subscription to a packet.\",\n    operationId: \"renewSubscription\",\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n    requestBody: {\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              month: { type: \"number\" },\n            },\n            required: [\"month\"],\n          },\n        },\n      },\n      required: true,\n    },\n    responses: {\n      \"200\": {\n        description: \"Subscription successfully renewed\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                subscription: { type: \"object\" },\n              },\n            },\n          },\n        },\n      },\n      \"400\": {\n        description: \"Invalid number of month\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: { type: \"string\" },\n              },\n            },\n          },\n        },\n      },\n      \"404\": {\n        description: \"Packet not found\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: { type: \"string\" },\n              },\n            },\n          },\n        },\n      },\n      \"500\": {\n        description: \"Internal server error\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: { type: \"string\" },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","import { FITNESS_GOALS } from \"../../../../contracts/enum/FitnessRelated.enum\";\r\n\r\nexport default {\r\n  get: {\r\n    tags: [\"plans\"],\r\n    summary: \"Get all user plans\",\r\n    description: \"This endpoint returns all the plans of a user.\",\r\n    operationId: \"getAllPlans\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User plans retrieved successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"array\",\r\n              items: {\r\n                type: \"object\",\r\n                properties: {\r\n                  _id: { type: \"string\" },\r\n                  name: { type: \"string\" },\r\n                  createdDate: { type: \"string\", format: \"date-time\" },\r\n                  status: { type: \"string\" },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  post: {\r\n    tags: [\"users\"],\r\n    summary: \"Create a new exercise plan\",\r\n    description: \"This endpoint creates a new exercise plan for a user.\",\r\n    operationId: \"createExercisePlan\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    requestBody: {\r\n      required: true,\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              name: { type: \"string\" },\r\n              description: { type: \"string\" },\r\n              goals: {\r\n                type: \"array\",\r\n                items: {\r\n                  type: \"string\",\r\n                  enum: Object.values(FITNESS_GOALS),\r\n                },\r\n                example: (Object.values(FITNESS_GOALS) as any).map(\r\n                  (fg: any) => fg.code\r\n                ),\r\n              },\r\n              durationInWeeks: { type: \"number\" },\r\n              frequencyPerWeek: { type: \"number\" },\r\n              restDaysPerWeek: { type: \"number\" },\r\n              intensity: { type: \"string\" },\r\n              exercises: {\r\n                type: \"array\",\r\n                items: {\r\n                  type: \"object\",\r\n                  properties: {\r\n                    name: { type: \"string\" },\r\n                    description: { type: \"string\" },\r\n                    sets: { type: \"number\" },\r\n                    repetitions: { type: \"number\" },\r\n                    restBetweenSetsInSeconds: { type: \"number\" },\r\n                    equipmentRequired: {\r\n                      type: \"array\",\r\n                      items: {\r\n                        type: \"object\",\r\n                        properties: {\r\n                          name: { type: \"string\" },\r\n                          description: { type: \"string\" },\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n              nutritionPlan: { type: \"object\" },\r\n              createdBy: { type: \"string\" },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      \"201\": {\r\n        description: \"Exercise plan created successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n                plan: {\r\n                  type: \"object\",\r\n                  properties: {\r\n                    id: { type: \"string\" },\r\n                    name: { type: \"string\" },\r\n                    description: { type: \"string\" },\r\n                    goals: {\r\n                      type: \"array\",\r\n                      items: {\r\n                        type: \"string\",\r\n                        enum: Object.values(FITNESS_GOALS),\r\n                      },\r\n                    },\r\n                    durationInWeeks: { type: \"number\" },\r\n                    frequencyPerWeek: { type: \"number\" },\r\n                    restDaysPerWeek: { type: \"number\" },\r\n                    intensity: { type: \"number\" },\r\n                    exercises: {\r\n                      type: \"array\",\r\n                      items: {\r\n                        type: \"object\",\r\n                        properties: {\r\n                          name: { type: \"string\" },\r\n                          description: { type: \"string\" },\r\n                          sets: { type: \"number\" },\r\n                          repetitions: { type: \"number\" },\r\n                          restBetweenSetsInSeconds: { type: \"number\" },\r\n                          equipmentRequired: {\r\n                            type: \"array\",\r\n                            items: {\r\n                              type: \"object\",\r\n                              properties: {\r\n                                name: { type: \"string\" },\r\n                                description: { type: \"string\" },\r\n                              },\r\n                            },\r\n                          },\r\n                        },\r\n                      },\r\n                    },\r\n                    nutritionPlan: { type: \"object\" },\r\n                    createdBy: { type: \"string\" },\r\n                    status: { type: \"string\" },\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Bad Request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"plans\"],\r\n    summary: \"Get a specific user plan\",\r\n    description: \"This endpoint returns a specific plan of a user.\",\r\n    operationId: \"getPlanById\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"id\",\r\n        in: \"path\",\r\n        description: \"ID of the plan to return\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User plan retrieved successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                plan: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Plan not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  put: {\r\n    tags: [\"plans\"],\r\n    summary: \"Edit a specific user plan\",\r\n    description: \"This endpoint edits a specific plan of a user.\",\r\n    operationId: \"editPlan\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"id\",\r\n        in: \"path\",\r\n        description: \"ID of the plan to edit\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              // Define the properties of the request body here\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User plan edited successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                plan: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Plan not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"plans\"],\r\n    summary: \"Start a specific user plan\",\r\n    description: \"This endpoint starts a specific plan of a user.\",\r\n    operationId: \"startPlan\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"id\",\r\n        in: \"path\",\r\n        description: \"ID of the plan to start\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User plan started successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                plan: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Plan not found or already started\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  post: {\r\n    tags: [\"plans\"],\r\n    summary: \"Complete a specific user plan\",\r\n    description: \"This endpoint completes a specific plan of a user.\",\r\n    operationId: \"completePlan\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"id\",\r\n        in: \"path\",\r\n        description: \"ID of the plan to complete\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"User plan completed successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                plan: { type: \"object\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Plan not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  put: {\r\n    tags: [\"plans\"],\r\n    summary: \"Add workout to exercise plan\",\r\n    description: \"This endpoint adds a workout to a specific exercise plan.\",\r\n    operationId: \"addWorkoutToExercisePlan\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"id\",\r\n        in: \"path\",\r\n        required: true,\r\n        description: \"The ID of the exercise plan\",\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    requestBody: {\r\n      required: true,\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              exerciseId: {\r\n                type: \"string\",\r\n                description: \"The ID of the exercise to add to the plan\",\r\n              },\r\n            },\r\n            required: [\"exerciseId\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Exercise added to plan successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Not Found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"news\"],\r\n    summary: \"Get specific news article\",\r\n    description:\r\n      \"This endpoint retrieves a specific news article based on the title parameter and returns it as a PDF.\",\r\n    operationId: \"getSpecificNews\",\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"title\",\r\n        in: \"path\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n        description: \"The title of the news article to retrieve.\",\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"PDF of the specific news article.\",\r\n        content: {\r\n          \"application/pdf\": {\r\n            schema: {\r\n              type: \"string\",\r\n              format: \"binary\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Article not found.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"An error occurred while extracting the specific news.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\n  get: {\n    tags: [\"goals\"],\n    summary: \"Get all fitness goals\",\n    description: \"This endpoint retrieves a list of all fitness goals.\",\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n    operationId: \"getAllGoals\",\n    responses: {\n      \"200\": {\n        description: \"A list of fitness goals.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                Goal_list: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      title: {\n                        type: \"string\",\n                      },\n                      description: {\n                        type: \"string\",\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      \"500\": {\n        description: \"Internal server error.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","export default {\n  put: {\n    tags: [\"plans\"],\n    summary: \"Cancel an exercise plan by user\",\n    description: \"This endpoint allows a user to cancel their exercise plan.\",\n    operationId: \"cancelExercisePlanByUser\",\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n    parameters: [\n      {\n        name: \"apiKey\",\n        in: \"query\",\n        description: \"User's API key\",\n        required: true,\n        schema: {\n          type: \"string\",\n        },\n      },\n      {\n        name: \"id\",\n        in: \"path\",\n        required: true,\n        schema: {\n          type: \"string\",\n        },\n        description: \"The ID of the exercise plan to be cancelled.\",\n      },\n    ],\n    requestBody: {\n      required: true,\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              user: {\n                type: \"object\",\n                properties: {\n                  _id: {\n                    type: \"string\",\n                  },\n                },\n                required: [\"_id\"],\n              },\n            },\n            required: [\"user\"],\n          },\n        },\n      },\n    },\n    responses: {\n      \"200\": {\n        description: \"Plan has been cancelled successfully.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n      \"400\": {\n        description: \"Plan status is already completed or cancelled.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n      \"404\": {\n        description: \"Plan not found or not the user's plan.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n      \"500\": {\n        description: \"Internal server error.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};","export default {\r\n  get: {\r\n    tags: [\"admin\"],\r\n    summary: \"Get admin dashboard\",\r\n    description: \"This endpoint returns the admin dashboard data.\",\r\n    operationId: \"getAdminDashboard\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Success\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                total_user: {\r\n                  type: \"number\"\r\n                },\r\n                free_package_user:{\r\n                  type: \"number\"\r\n                },\r\n                non_free_package_user:{\r\n                  type: \"number\"\r\n                }\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"admin\"],\r\n    summary: \"Get user profile\",\r\n    description: \"This endpoint returns the profile of a specific user.\",\r\n    operationId: \"getUserProfile\",\r\n    parameters: [\r\n      {\r\n        name: \"userID\",\r\n        in: \"path\",\r\n        description: \"ID of user to fetch\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Success\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                username: { type: \"string\" },\r\n                full_name: { type: \"string\" },\r\n                email: { type: \"string\" },\r\n                phone: { type: \"string\" },\r\n                balance: { type: \"number\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  delete: {\r\n    tags: [\"admin\"],\r\n    summary: \"Delete user profile\",\r\n    description: \"This endpoint deletes the profile of a specific user.\",\r\n    operationId: \"deleteUserProfile\",\r\n    parameters: [\r\n      {\r\n        name: \"userID\",\r\n        in: \"path\",\r\n        description: \"ID of user to delete\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Success\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"admin\"],\r\n    summary: \"Get user packet\",\r\n    description: \"This endpoint returns the packet of a specific user.\",\r\n    operationId: \"getUserPacket\",\r\n    parameters: [\r\n      {\r\n        name: \"userID\",\r\n        in: \"path\",\r\n        description: \"ID of user to fetch\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Success\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                username: { type: \"string\" },\r\n                nama: { type: \"string\" },\r\n                subscription_start: { type: \"string\", format: \"date-time\" },\r\n                subscription_end: { type: \"string\", format: \"date-time\" },\r\n                packet: { type: \"object\",\r\n                  properties:{\r\n                    Paket_id: { type: \"string\" },\r\n                    Paket_name: { type: \"string\" },\r\n                    Paket_description: { type: \"string\" },\r\n                    Paket_limit: { type: \"number\" },\r\n                    Paket_price: { type: \"number\" },\r\n                    Paket_currency: { type: \"string\" },\r\n                  }\r\n                 },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User or Packet not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  post: {\r\n    tags: [\"admin\"],\r\n    summary: \"Add user packet\",\r\n    description: \"This endpoint adds a packet to a specific user.\",\r\n    operationId: \"addUserPacket\",\r\n    parameters: [\r\n      {\r\n        name: \"userID\",\r\n        in: \"path\",\r\n        description: \"ID of user to add packet\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"array\",\r\n            items: {\r\n              type: \"object\",\r\n              properties: {\r\n                paket_id: { type: \"string\" },\r\n                month: { type: \"number\" },\r\n              },\r\n              required: [\"paket_id\", \"month\"],\r\n            },\r\n          },\r\n          example: [\r\n            {\r\n              paket_id: \"PAK002\",\r\n              month: 1,\r\n            },\r\n            {\r\n              paket_id: \"PAK003\",\r\n              month: 2,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      required: true,\r\n    },\r\n    responses: {\r\n      \"201\": {\r\n        description: \"Subscriptions created successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n                transaction: {\r\n                  type: \"object\",\r\n                  properties: {\r\n                    transactionHeaderType: { type: \"string\" },\r\n                    date: { type: \"string\", format: \"date-time\" },\r\n                    total: { type: \"number\" },\r\n                    userId: { type: \"string\" },\r\n                    isAdmin: { type: \"boolean\" },\r\n                  },\r\n                },\r\n                subscriptions: {\r\n                  type: \"array\",\r\n                  items: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                      transactionDetailType: { type: \"string\" },\r\n                      paket_id: { type: \"string\" },\r\n                      subscription_id: { type: \"string\" },\r\n                      month: { type: \"number\" },\r\n                      price: { type: \"number\" },\r\n                      subtotal: { type: \"number\" },\r\n                      message: { type: \"string\" },\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User or Packet not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  delete: {\r\n    tags: [\"admin\"],\r\n    summary: \"Delete user packet\",\r\n    description: \"This endpoint deletes the packet of a specific user.\",\r\n    operationId: \"deleteUserPacket\",\r\n    parameters: [\r\n      {\r\n        name: \"userID\",\r\n        in: \"path\",\r\n        description: \"ID of user to delete packet\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Success\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User or Packet not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    summary: \"Get Exercise\",\r\n    description: \"Get exercise data based on various filters\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        in: \"query\",\r\n        name: \"exercise\",\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n        description: \"Exercise name\",\r\n      },\r\n      {\r\n        in: \"query\",\r\n        name: \"type\",\r\n        schema: {\r\n          type: \"string\",\r\n          enum: [\r\n            \"cardio\",\r\n            \"olympic_weightlifting\",\r\n            \"plyometrics\",\r\n            \"powerlifting\",\r\n            \"strength\",\r\n            \"stretching\",\r\n            \"strongman\",\r\n          ],\r\n        },\r\n        description: \"Exercise type\",\r\n      },\r\n      {\r\n        in: \"query\",\r\n        name: \"muscle\",\r\n        schema: {\r\n          type: \"string\",\r\n          enum: [\r\n            \"abdominals\",\r\n            \"abductors\",\r\n            \"adductors\",\r\n            \"biceps\",\r\n            \"calves\",\r\n            \"chest\",\r\n            \"forearms\",\r\n            \"glutes\",\r\n            \"hamstrings\",\r\n            \"lats\",\r\n            \"lower_back\",\r\n            \"middle_back\",\r\n            \"neck\",\r\n            \"quadriceps\",\r\n            \"traps\",\r\n            \"triceps\",\r\n            \"shoulders\",\r\n          ],\r\n        },\r\n        description: \"Target muscle\",\r\n      },\r\n      {\r\n        in: \"query\",\r\n        name: \"difficulty\",\r\n        schema: {\r\n          type: \"string\",\r\n          enum: [\"beginner\", \"intermediate\", \"expert\"],\r\n        },\r\n        description: \"Exercise difficulty level\",\r\n      },\r\n      {\r\n        in: \"query\",\r\n        name: \"page\",\r\n        schema: {\r\n          type: \"integer\",\r\n          default: 0,\r\n        },\r\n        description: \"Page number for pagination\",\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Successful response\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                exercise: {\r\n                  type: \"array\",\r\n                  items: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                      name: {\r\n                        type: \"string\",\r\n                        description: \"Name of the exercise\",\r\n                      },\r\n                      type: {\r\n                        type: \"string\",\r\n                        enum: [\r\n                          \"cardio\",\r\n                          \"olympic_weightlifting\",\r\n                          \"plyometrics\",\r\n                          \"powerlifting\",\r\n                          \"strength\",\r\n                          \"stretching\",\r\n                          \"strongman\",\r\n                        ],\r\n                        description: \"Type of exercise\",\r\n                      },\r\n                      muscle: {\r\n                        type: \"string\",\r\n                        enum: [\r\n                          \"abdominals\",\r\n                          \"abductors\",\r\n                          \"adductors\",\r\n                          \"biceps\",\r\n                          \"calves\",\r\n                          \"chest\",\r\n                          \"forearms\",\r\n                          \"glutes\",\r\n                          \"hamstrings\",\r\n                          \"lats\",\r\n                          \"lower_back\",\r\n                          \"middle_back\",\r\n                          \"neck\",\r\n                          \"quadriceps\",\r\n                          \"traps\",\r\n                          \"triceps\",\r\n                          \"shoulders\",\r\n                        ],\r\n                        description: \"Target muscle\",\r\n                      },\r\n                      equipment: {\r\n                        type: \"string\",\r\n                        description: \"Equipment used\",\r\n                      },\r\n                      difficulty: {\r\n                        type: \"string\",\r\n                        enum: [\"beginner\", \"intermediate\", \"expert\"],\r\n                        description: \"Difficulty level\",\r\n                      },\r\n                      instructions: {\r\n                        type: \"string\",\r\n                        description: \"Instructions for the exercise\",\r\n                      },\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Bad Request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"Not Found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal Server Error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: {\r\n                  type: \"string\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  get: {\r\n    tags: [\"news\"],\r\n    summary: \"Get all or filtered news articles\",\r\n    description:\r\n      \"This endpoint retrieves all news articles from the specified sources or filters them based on the provided query parameters.\",\r\n    operationId: \"getFilteredNews\",\r\n    parameters: [\r\n      {\r\n        name: \"apiKey\",\r\n        in: \"query\",\r\n        description: \"User's API key\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        name: \"title\",\r\n        in: \"query\",\r\n        required: false,\r\n        description: \"The title to filter the news articles by.\",\r\n        schema: {\r\n          type: \"string\"\r\n        }\r\n      }\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"A list of news articles, possibly filtered by title.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"array\",\r\n              items: {\r\n                type: \"object\",\r\n                properties: {\r\n                  title: { type: \"string\" },\r\n                  url: { type: \"string\" },\r\n                  detail: { type: \"string\" },\r\n                  type: { type: \"string\" },\r\n                  writer: { type: \"string\" },\r\n                  publishedDate: { type: \"string\" },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"No articles found matching the criteria.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"An error occurred while extracting news.\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                message: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\n  get: {\n    tags: [\"goals\"],\n    summary: \"Get fitness goal by ID\",\n    description: \"This endpoint retrieves a specific fitness goal by its ID.\",\n    operationId: \"getGoalById\",\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n    parameters: [\n      {\n        name: \"title\",\n        in: \"path\",\n        required: true,\n        schema: {\n          type: \"string\",\n        },\n        description: \"The ID of the fitness goal.\",\n      },\n    ],\n    responses: {\n      \"200\": {\n        description: \"The requested fitness goal.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                Goal: {\n                  type: \"object\",\n                  properties: {\n                    title: {\n                      type: \"string\",\n                    },\n                    description: {\n                      type: \"string\",\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      \"404\": {\n        description: \"Goal not found.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n      \"500\": {\n        description: \"Internal server error.\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                message: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","import { ENV } from \"../../../config/environment\";\r\n\r\nexport default {\r\n  get: {\r\n    tags: [\"gyms\"],\r\n    summary: \"Get nearest gyms\",\r\n    description: `This endpoint returns the nearest gyms based on the provided latitude, longitude, and radius. you can use the frontend <a href=\"${ENV.BACKEND_API_URL}:${ENV.PORT}/location\">${ENV.BACKEND_API_URL}:${ENV.PORT}/location</a>`,\r\n    operationId: \"getNearestGyms\",\r\n    security: [\r\n      {\r\n        bearerAuth: [],\r\n      },\r\n    ],\r\n    parameters: [\r\n      {\r\n        name: \"lat\",\r\n        in: \"query\",\r\n        required: true,\r\n        schema: {\r\n          type: \"number\",\r\n        },\r\n        description: \"Latitude of the location to search gyms around.\",\r\n      },\r\n      {\r\n        name: \"lng\",\r\n        in: \"query\",\r\n        required: true,\r\n        schema: {\r\n          type: \"number\",\r\n        },\r\n        description: \"Longitude of the location to search gyms around.\",\r\n      },\r\n    ],\r\n    responses: {\r\n      \"200\": {\r\n        description: \"Gyms retrieved successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                data: {\r\n                  type: \"array\",\r\n                  items: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                      business_status: { type: \"string\" },\r\n                      geometry: {\r\n                        type: \"object\",\r\n                        properties: {\r\n                          location: {\r\n                            type: \"object\",\r\n                            properties: {\r\n                              lat: { type: \"number\" },\r\n                              lng: { type: \"number\" },\r\n                            },\r\n                          },\r\n                          viewport: {\r\n                            type: \"object\",\r\n                            properties: {\r\n                              northeast: {\r\n                                type: \"object\",\r\n                                properties: {\r\n                                  lat: { type: \"number\" },\r\n                                  lng: { type: \"number\" },\r\n                                },\r\n                              },\r\n                              southwest: {\r\n                                type: \"object\",\r\n                                properties: {\r\n                                  lat: { type: \"number\" },\r\n                                  lng: { type: \"number\" },\r\n                                },\r\n                              },\r\n                            },\r\n                          },\r\n                        },\r\n                      },\r\n                      icon: { type: \"string\" },\r\n                      icon_background_color: { type: \"string\" },\r\n                      icon_mask_base_uri: { type: \"string\" },\r\n                      name: { type: \"string\" },\r\n                      opening_hours: {\r\n                        type: \"object\",\r\n                        properties: {\r\n                          open_now: { type: \"boolean\" },\r\n                        },\r\n                      },\r\n                      photos: {\r\n                        type: \"array\",\r\n                        items: {\r\n                          type: \"object\",\r\n                          properties: {\r\n                            height: { type: \"number\" },\r\n                            html_attributions: {\r\n                              type: \"array\",\r\n                              items: { type: \"string\" },\r\n                            },\r\n                            photo_reference: { type: \"string\" },\r\n                            width: { type: \"number\" },\r\n                          },\r\n                        },\r\n                      },\r\n                      place_id: { type: \"string\" },\r\n                      plus_code: {\r\n                        type: \"object\",\r\n                        properties: {\r\n                          compound_code: { type: \"string\" },\r\n                          global_code: { type: \"string\" },\r\n                        },\r\n                      },\r\n                      reference: { type: \"string\" },\r\n                      scope: { type: \"string\" },\r\n                      types: {\r\n                        type: \"array\",\r\n                        items: { type: \"string\" },\r\n                      },\r\n                      vicinity: { type: \"string\" },\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"400\": {\r\n        description: \"Bad Request\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                error: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"401\": {\r\n        description: \"Unauthorized\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"404\": {\r\n        description: \"User not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      \"500\": {\r\n        description: \"Internal server error\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                msg: { type: \"string\" },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\n    get: {\n      tags: [\"users\"],\n      summary: \"Get user profile picture\",\n      description: \"This endpoint returns the user's profile picture.\",\n      operationId: \"getProfilePicture\",\n      security: [\n        {\n          bearerAuth: [],\n        },\n      ],\n      responses: {\n        \"200\": {\n          description: \"User profile picture retrieved successfully\",\n          content: {\n            \"image/png\": {\n              schema: {\n                type: \"string\",\n                format: \"binary\"\n              },\n              example: \"User's profile picture\"\n            },\n          },\n        },\n        \"401\": {\n          description: \"Unauthorized\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  msg: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n        \"500\": {\n          description: \"Internal server error\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  error: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  };\n  ","export default {\n  get: {\n    tags: [\"admin\"],\n    summary: \"Get user profile picture\",\n    description: \"This endpoint returns the profile picture of a specific user.\",\n    operationId: \"getUserProfilePicture\",\n    parameters: [\n      {\n        name: \"userID\",\n        in: \"path\",\n        description: \"ID of user to fetch\",\n        required: true,\n        schema: {\n          type: \"string\",\n        },\n      },\n    ],\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n    responses: {\n      \"200\": {\n        description: \"User profile picture retrieved successfully\",\n        content: {\n          \"image/png\": {\n            schema: {\n              type: \"string\",\n              format: \"binary\"\n            },\n            example: \"User's profile picture\"\n          },\n        },\n      },\n      \"401\": {\n        description: \"Unauthorized\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n      \"404\": {\n        description: \"User not found\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n      \"500\": {\n        description: \"Internal server error\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: {\n                  type: \"string\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}","export default {\n    put: {\n      tags: [\"admin\"],\n      summary: \"Update user balance\",\n      description: \"This endpoint updates the balance of all users or a specific user.\",\n      operationId: \"topupFromAdmin\",\n      parameters: [\n        {\n          name: \"userID\",\n          in: \"path\",\n          description: \"ID of user to fetch\",\n          required: false,\n          schema: {\n            type: \"string\",\n          },\n          example: \"\"\n        },\n      ],\n      security: [\n        {\n          bearerAuth: [],\n        },\n      ],\n      requestBody: {\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                saldo: { type: \"number\" },\n              },\n              required: [\"saldo\"],\n            },\n          },\n        },\n        required: true,\n      },\n      responses: {\n        \"200\": {\n        description: \"Success\",\n        content: {\n          \"application/json\": {\n            schema: {\n              type: \"object\",\n              properties: {\n                msg: { type: \"string\" },\n                username: { type: \"string\" },\n                full_name: { type: \"string\" },\n                newBalance: { type: \"number\" },\n              },\n            },\n            examples: {\n              specificUser: {\n                summary: \"Balance updated for specific user\",\n                value: {\n                  msg: \"Balance updated successfully\",\n                  username: \"string1\",\n                  full_name: \"string\",\n                  newBalance: 5000,\n                },\n              },\n              allUsers: {\n                summary: \"Balance updated for all users\",\n                value: {\n                  msg: \"Balance updated for all users successfully\",\n                },\n              },\n            },\n          },\n        },\n      },\n        \"401\": {\n          description: \"Unauthorized\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  msg: {\n                    type: \"string\",\n                  },\n                },\n              },\n            },\n          },\n        },\n        \"404\": {\n          description: \"User not found\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  msg: {\n                    type: \"string\",\n                  },\n                },\n              },\n            },\n          },\n        },\n        \"500\": {\n          description: \"Internal server error\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  msg: {\n                    type: \"string\",\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n  };\n  ","import { JSDOM } from \"jsdom\";\r\nimport { SwaggerUIBundle } from \"swagger-ui-dist\";\r\nimport { SwaggerUIStandalonePreset } from \"swagger-ui-dist\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport root from \"./paths/root\";\r\nimport register from \"./paths/auth/register\";\r\nimport login from \"./paths/auth/login\";\r\nimport newAccessTokenFromRefreshToken from \"./paths/auth/newAccessTokenFromRefreshToken\";\r\nimport newRefreshToken from \"./paths/auth/newRefreshToken\";\r\nimport verifyEmail from \"./paths/auth/verifyEmail\";\r\nimport getAllUser from \"./paths/admin/getAllUser\";\r\nimport topup from \"./paths/user/topup\";\r\nimport userDashboard from \"./paths/user/userDashboard\";\r\nimport editUserProfile from \"./paths/user/editUserProfile\";\r\nimport getAllPricing from \"./paths/public/getAllPricing\";\r\nimport getUserAPIKey from \"./paths/user/getUserAPIKey\";\r\nimport resetUserAPIKey from \"./paths/user/resetUserAPIKey\";\r\nimport subscribeToUserPacket from \"./paths/user/subscribeToUserPacket\";\r\nimport renewSubscription from \"./paths/user/renewSubscription\";\r\nimport userPlanHandlers from \"./paths/user/plan/userPlanHandlers\";\r\nimport userPlanByIDHandlers from \"./paths/user/plan/userPlanByIDHandlers\";\r\nimport editUserPlanById from \"./paths/user/plan/editUserPlanById\";\r\nimport startUserPlanById from \"./paths/user/plan/startUserPlanById\";\r\nimport completeUserPlanById from \"./paths/user/plan/completeUserPlanById\";\r\nimport addWorkoutToExercisePlan from \"./paths/user/plan/exercise/workout/addWorkoutToExercisePlan\";\r\nimport getNewsByTitle from \"./paths/news/getNewsByTitle\";\r\nimport getAllGoals from \"./paths/user/plan/exercise/goals/getAllGoals\";\r\nimport cancelPlanByUser from \"./paths/user/plan/cancelPlanByUser\";\r\nimport adminDashboard from \"./paths/admin/adminDashboard\";\r\nimport getAndDeleteUserProfile from \"./paths/admin/getAndDeleteUserProfile\";\r\nimport getAndPostAndDeletePacket from \"./paths/admin/getAndPostAndDeletePacket\";\r\nimport getExerciseByQuery from \"./paths/user/plan/exercise/getExerciseByQuery\";\r\nimport getNewsFilterOrAllNews from \"./paths/news/getNewsFilterOrAllNews\";\r\nimport getGoalByTitle from \"./paths/user/plan/exercise/goals/getGoalByTitle\";\r\nimport getNearestGyms from \"./paths/location/getNearestGyms\";\r\nimport getProfilePicture from \"./paths/user/getProfilePicture\";\r\nimport getUserProfilePicture from \"./paths/admin/getUserProfilePicture\";\r\nimport topupFromAdmin from \"./paths/admin/topupFromAdmin\";\r\n\r\nconst { window } = new JSDOM();\r\nconst $ = require(\"jquery\")(window);\r\n\r\nconst paths: any = {};\r\npaths[\"/\"] = root;\r\npaths[\"/api/v1/auth/register\"] = register;\r\npaths[\"/api/v1/auth/login\"] = login;\r\npaths[\"/api/v1/auth/token\"] = newAccessTokenFromRefreshToken;\r\npaths[\"/api/v1/auth/refresh_token\"] = newRefreshToken;\r\npaths[\"/api/v1/auth/verify/{emailVerificationToken}\"] = verifyEmail;\r\npaths[\"/api/v1/users/topup\"] = topup;\r\npaths[\"/api/v1/users/dashboard\"] = userDashboard;\r\npaths[\"/api/v1/users/profile-picture\"] = getProfilePicture;\r\npaths[\"/api/v1/users/profile\"] = editUserProfile;\r\npaths[\"/api/v1/pricing\"] = getAllPricing;\r\npaths[\"/api/v1/users/apikey\"] = getUserAPIKey;\r\npaths[\"/api/v1/users/apikey/reset\"] = resetUserAPIKey;\r\npaths[\"/api/v1/users/subscribe\"] = subscribeToUserPacket;\r\npaths[\"/api/v1/users/renew\"] = renewSubscription;\r\npaths[\"/api/v1/exercise\"] = getExerciseByQuery;\r\npaths[\"/api/v1/users/plan\"] = userPlanHandlers;\r\npaths[\"/api/v1/users/plan/{id}\"] = userPlanByIDHandlers;\r\npaths[\"/api/v1/users/plan/edit/{id}\"] = editUserPlanById;\r\npaths[\"/api/v1/users/plan/start/{id}\"] = startUserPlanById;\r\npaths[\"/api/v1/users/plan/complete/{id}\"] = completeUserPlanById;\r\n\r\npaths[\"/api/v1/users/plan/{id}/workout/\"] = addWorkoutToExercisePlan;\r\npaths[\"/api/v1/news\"] = getNewsFilterOrAllNews;\r\npaths[\"/api/v1/news/{title}\"] = getNewsByTitle;\r\npaths[\"/api/v1/exercise/goals\"] = getAllGoals;\r\npaths[\"/api/v1/exercise/goals/{title}\"] = getGoalByTitle;\r\npaths[\"/api/v1/users/plan/cancel/{id}\"] = cancelPlanByUser;\r\n\r\npaths[\"/api/v1/admin/users\"] = getAllUser;\r\npaths[\"/api/v1/admin/dashboard\"] = adminDashboard; // GET\r\npaths[\"/api/v1/admin/user/profile/{userID}\"] = getAndDeleteUserProfile; // GET and DELETE\r\npaths[\"/api/v1/admin/user/profile-picture/{userID}\"] = getUserProfilePicture; // GET and DELETE\r\npaths[\"/api/v1/admin/user/packet/{userID}\"] = getAndPostAndDeletePacket; // GET and POST and DELETE\r\npaths[\"/api/v1/admin/user/topup/{userID}\"] = topupFromAdmin;\r\n\r\npaths[\"/api/v1/gyms/nearest\"] = getNearestGyms;\r\n// paths[\"/api/v1/admin/dashboard\"] = {}\r\n// paths[\"/api/v1/admin/dashboard\"] = {}\r\n\r\nconst swaggerDocument = {\r\n  openapi: \"3.0.0\",\r\n  info: {\r\n    title: \"We Fit\",\r\n    description:\r\n      \"We Fit is a fitness-oriented web service that helps users find nearby gyms, track their workouts, and stay motivated on their fitness journey. Whether you’re a seasoned athlete or just starting out, We Fit provides a seamless experience to help you achieve your fitness goals.\",\r\n    version: \"1.0.0\",\r\n  },\r\n  components: {\r\n    securitySchemes: {\r\n      bearerAuth: {\r\n        type: \"http\",\r\n        scheme: \"bearer\",\r\n        bearerFormat: \"JWT\",\r\n        in: \"header\",\r\n        name: \"authorization\",\r\n      },\r\n      apiKeyAuth: {\r\n        type: \"http\",\r\n        // scheme: \"bearer\",\r\n        // bearerFormat: \"JWT\",\r\n        in: \"query\",\r\n        name: \"x-api-key\",\r\n      },\r\n      cookieAuth: {\r\n        type: \"apiKey\",\r\n        in: \"cookie\",\r\n        name: \"refresh_token\", // Name of the cookie\r\n      },\r\n    },\r\n  },\r\n  security: {\r\n    bearerAuth: [],\r\n    cookieAuth: [],\r\n  },\r\n  paths: paths,\r\n};\r\n\r\n// Execute the Swagger UI setup within jQuery document ready function\r\n// $(function () {\r\n//   // Initialize Swagger UI with bundled resources\r\n//   const ui = SwaggerUIBundle({\r\n//     spec: swaggerDocument,\r\n//     dom_id: \"#swagger-ui\",\r\n//     presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],\r\n//     plugins: [\r\n//       SwaggerUIBundle.plugins.DownloadUrl,\r\n//       // Custom plugin to handle current location button\r\n//       function (system: any) {\r\n//         return {\r\n//           components: {\r\n//             // Define custom button component for current location\r\n//             CurrentLocationButton: function (props: any) {\r\n//               const { getComponent, specSelectors } = props;\r\n\r\n//               // Function to handle current location button click\r\n//               const onGetCurrentLocation = () => {\r\n//                 // Check if Geolocation API is supported\r\n//                 if (navigator.geolocation) {\r\n//                   navigator.geolocation.getCurrentPosition(\r\n//                     (position) => {\r\n//                       const latitude = position.coords.latitude;\r\n//                       const longitude = position.coords.longitude;\r\n//                       const radius = 1000; // Example radius\r\n\r\n//                       // Update Swagger UI with fetched location\r\n//                       const params = new URLSearchParams(\r\n//                         window.location.search\r\n//                       );\r\n//                       params.set(\"lat\", latitude.toString());\r\n//                       params.set(\"lng\", longitude.toString());\r\n//                       params.set(\"radius\", radius.toString());\r\n//                       const newUrl = `${\r\n//                         window.location.pathname\r\n//                       }?${params.toString()}`;\r\n//                       window.history.replaceState({}, \"\", newUrl);\r\n\r\n//                       // Reload the page to reflect the updated query parameters\r\n//                       window.location.reload();\r\n//                     },\r\n//                     (error) => {\r\n//                       console.error(\"Error fetching location:\", error);\r\n//                     }\r\n//                   );\r\n//                 } else {\r\n//                   console.error(\r\n//                     \"Geolocation API is not supported by this browser.\"\r\n//                   );\r\n//                 }\r\n//               };\r\n\r\n//               return (\r\n//                 // Render the button in JSX\r\n//                 `<button onClick=\"(${onGetCurrentLocation.toString()})()\">Get Current Location</button>`\r\n//               );\r\n//             },\r\n//           },\r\n//           wrapComponents: {\r\n//             // Wrap operation with custom button\r\n//             parameters: (Original: any, system: any) => {\r\n//               const CurrentLocationButton = system.getComponent(\r\n//                 \"CurrentLocationButton\"\r\n//               );\r\n//               return (props: any) => {\r\n//                 const { name } = props;\r\n//                 if (name === \"x-sinap-get-current-location\") {\r\n//                   return `<CurrentLocationButton ${props} />`;\r\n//                 }\r\n//                 return `<Original ${props} />`;\r\n//               };\r\n//             },\r\n//           },\r\n//         };\r\n//       },\r\n//     ],\r\n//   });\r\n\r\n//   // Expose Swagger UI instance to global scope for debugging\r\n//   (window as any).ui = ui;\r\n// });\r\n// console.log(swaggerDocument);\r\n// const directoryExists = (dirPath: string) => {\r\n//   try {\r\n//     return fs.statSync(dirPath).isDirectory();\r\n//   } catch (err) {\r\n//     return false;\r\n//   }\r\n// };\r\n// const logDir = path.join(__dirname, \"swagger_log\");\r\n// if (!directoryExists(logDir)) {\r\n//   fs.mkdirSync(logDir);\r\n// }\r\n// const swaggerJSON = JSON.stringify(swaggerDocument, null, 2);\r\n// const logFilePath = path.join(logDir, \"swagger.json\");\r\n// try {\r\n//   fs.writeFileSync(logFilePath, swaggerJSON);\r\n// } catch (error) {\r\n//   console.error(\"Error writing file:\", error);\r\n// }\r\n\r\nexport default swaggerDocument;\r\n//   components:\r\n//   securitySchemes:\r\n//     bearerAuth:            # arbitrary name for the security scheme\r\n//       type: http\r\n//       scheme: bearer\r\n//       bearerFormat: JWT    # optional, arbitrary value for documentation purposes\r\n// # 2) Apply the security globally to all operations\r\n// security:\r\n//   - bearerAuth: []         # use the same name as above\r\n","import mongoose, { ConnectOptions } from \"mongoose\";\r\nimport { ENV } from \"../config/environment\";\r\n\r\nconst connectMongoDB = async (): Promise<void> => {\r\n  try {\r\n    await mongoose.connect(ENV.MONGODB_URI);\r\n    console.log(\"MongoDB connected...\");\r\n  } catch (err: any) {\r\n    console.error(err.message);\r\n  }\r\n};\r\nconst closeMongoDB = async (): Promise<void> => {\r\n  try {\r\n    await mongoose.connection.close();\r\n    console.log(\"MongoDB connection closed...\");\r\n  } catch (err: any) {\r\n    console.error(err.message);\r\n  }\r\n};\r\n\r\nexport { connectMongoDB, closeMongoDB };\r\n","import express, { Request, Response } from \"express\";\r\nimport { ENV } from \"./config/environment\";\r\nimport router from \"./router/router\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport swaggerUi from \"swagger-ui-express\";\r\nimport { ROUTES } from \"./contracts/enum/RoutesRelated.enum\";\r\nimport cors from \"cors\";\r\nimport swaggerDocument from \"./documentation/swagger\";\r\nimport { RESPONSE_STATUS } from \"./contracts/enum/ResponseRelated.enum\";\r\nimport { connectMongoDB } from \"./connection/connection\";\r\nimport sequelize from \"./connection/connectionStatic\";\r\nimport Paket from \"./models/static/Paket.model\";\r\nimport path from \"path\";\r\n\r\nconst app = express();\r\n\r\n// const swaggerUiAssetPath = require(\"swagger-ui-dist\").getAbsoluteFSPath();\r\n\r\napp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerDocument));\r\n// app.use(\"/swagger-ui\", express.static(swaggerUiAssetPath));\r\n\r\nconnectMongoDB();\r\n\r\napp.use(cors());\r\napp.use(cookieParser());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\napp.use(ROUTES.API_V1, router);\r\n\r\napp.get(ROUTES.ROOT, (req: Request, res: Response) => {\r\n  return res\r\n    .status(RESPONSE_STATUS.SUCCESS)\r\n    .send(\"This API Service is currently running\");\r\n});\r\n\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\n//return a render ejs\r\napp.get(\"/location\", async (req: Request, res: Response) => {\r\n  try {\r\n    // You can pass data to your EJS file if needed\r\n    const data = {\r\n      backend_url: `${ENV.BACKEND_API_URL}:${ENV.PORT}`,\r\n      // other data...\r\n    };\r\n\r\n    // Render the 'location' EJS view file (assuming it exists in your views directory)\r\n\r\n    res.render(path.join(__dirname, \"templates\", \"get_location.ejs\"), data);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send(\"An error occurred\");\r\n  }\r\n});\r\n\r\nexport default app;\r\n","import app from \".\";\r\nimport { ENV } from \"./config/environment\";\r\n\r\napp.listen(ENV.PORT, () =>\r\n  console.log(\"Server is running at http://localhost:\" + ENV.PORT)\r\n);\r\n"]}